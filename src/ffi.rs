/* automatically generated by rust-bindgen */

pub const HasX11: u32 = 1;
pub const QuantumDepth: u32 = 16;
pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _BITS_LIBIO_H: u32 = 1;
pub const _BITS_G_CONFIG_H: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _G_HAVE_MMAP: u32 = 1;
pub const _G_HAVE_MREMAP: u32 = 1;
pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
pub const _G_BUFSIZ: u32 = 8192;
pub const _IO_BUFSIZ: u32 = 8192;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
pub const EOF: i32 = -1;
pub const _IOS_INPUT: u32 = 1;
pub const _IOS_OUTPUT: u32 = 2;
pub const _IOS_ATEND: u32 = 4;
pub const _IOS_APPEND: u32 = 8;
pub const _IOS_TRUNC: u32 = 16;
pub const _IOS_NOCREATE: u32 = 32;
pub const _IOS_NOREPLACE: u32 = 64;
pub const _IOS_BIN: u32 = 128;
pub const _IO_MAGIC: u32 = 4222418944;
pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
pub const _IO_MAGIC_MASK: u32 = 4294901760;
pub const _IO_USER_BUF: u32 = 1;
pub const _IO_UNBUFFERED: u32 = 2;
pub const _IO_NO_READS: u32 = 4;
pub const _IO_NO_WRITES: u32 = 8;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
pub const _IO_LINKED: u32 = 128;
pub const _IO_IN_BACKUP: u32 = 256;
pub const _IO_LINE_BUF: u32 = 512;
pub const _IO_TIED_PUT_GET: u32 = 1024;
pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
pub const _IO_IS_APPENDING: u32 = 4096;
pub const _IO_IS_FILEBUF: u32 = 8192;
pub const _IO_BAD_SEEN: u32 = 16384;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IO_FLAGS2_MMAP: u32 = 1;
pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
pub const _IO_SKIPWS: u32 = 1;
pub const _IO_LEFT: u32 = 2;
pub const _IO_RIGHT: u32 = 4;
pub const _IO_INTERNAL: u32 = 8;
pub const _IO_DEC: u32 = 16;
pub const _IO_OCT: u32 = 32;
pub const _IO_HEX: u32 = 64;
pub const _IO_SHOWBASE: u32 = 128;
pub const _IO_SHOWPOINT: u32 = 256;
pub const _IO_UPPERCASE: u32 = 512;
pub const _IO_SHOWPOS: u32 = 1024;
pub const _IO_SCIENTIFIC: u32 = 2048;
pub const _IO_FIXED: u32 = 4096;
pub const _IO_UNITBUF: u32 = 8192;
pub const _IO_STDIO: u32 = 16384;
pub const _IO_DONT_CLOSE: u32 = 32768;
pub const _IO_BOOLALPHA: u32 = 65536;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const MaxTextExtent: u32 = 2053;
pub const MagickSignature: u32 = 2880220587;
pub const MagickPass: u32 = 1;
pub const MagickFail: u32 = 0;
pub const MagickTrue: u32 = 1;
pub const MagickFalse: u32 = 0;
pub const MAGICK_INT32_F: &'static [u8; 1usize] = b"\0";
pub const MAGICK_UINT32_F: &'static [u8; 1usize] = b"\0";
pub const MAGICK_INT64_F: &'static [u8; 2usize] = b"l\0";
pub const MAGICK_UINT64_F: &'static [u8; 2usize] = b"l\0";
pub const MAGICK_UINTMAX_F: &'static [u8; 2usize] = b"l\0";
pub const MAGICK_UINTPTR_F: &'static [u8; 2usize] = b"l\0";
pub const MAGICK_SIZE_T_F: &'static [u8; 2usize] = b"l\0";
pub const MAGICK_SSIZE_T_F: &'static [u8; 2usize] = b"l\0";
pub const MAGICK_OFF_F: &'static [u8; 2usize] = b"l\0";
pub const MagickLogFilename: &'static [u8; 8usize] = b"log.mgk\0";
pub const MaxColormapSize: u32 = 65536;
pub const MaxMap: u32 = 65535;
pub const MaxMapDepth: u32 = 16;
pub const MaxMapFloat: f64 = 65535.0;
pub const MaxMapDouble: f64 = 65535.0;
pub const MaxRGB: u32 = 65535;
pub const MaxRGBFloat: f64 = 65535.0;
pub const MaxRGBDouble: f64 = 65535.0;
pub const OpaqueOpacity: u32 = 0;
pub const TransparentOpacity: u32 = 65535;
pub const MAGICK_PIXELS_BGRA: u32 = 1;
pub const MinBlobExtent: u32 = 32768;
pub const MAGICK_RANDOM_MAX: u32 = 4294967295;
pub const MaxTreeDepth: u32 = 8;
pub const NodesInAList: u32 = 1536;
pub const SignatureSize: u32 = 64;
pub const MagickPackageName: &'static [u8; 15usize] = b"GraphicsMagick\0";
pub const MagickCopyright : & 'static [ u8 ; 171usize ] = b"Copyright (C) 2002-2018 GraphicsMagick Group.\nAdditional copyrights and licenses apply to this software.\nSee http://www.GraphicsMagick.org/www/Copyright.html for details.\0" ;
pub const MagickLibVersion: u32 = 2168833;
pub const MagickLibVersionText: &'static [u8; 4usize] = b"1.4\0";
pub const MagickChangeDate: &'static [u8; 9usize] = b"20180922\0";
pub const MagickReleaseDate: &'static [u8; 18usize] = b"snapshot-20180922\0";
pub const MagickLibInterfaceNewest: u32 = 21;
pub const MagickLibInterfaceOldest: u32 = 3;
pub const MagickQuantumDepth: &'static [u8; 4usize] = b"Q16\0";
pub const MagickVersion: &'static [u8; 42usize] = b"GraphicsMagick 1.4 snapshot-20180922 Q16 \0";
pub const MagickWebSite: &'static [u8; 31usize] = b"http://www.GraphicsMagick.org/\0";
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__fsid_t), "::", stringify!(__val))
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
impl ::std::fmt::Debug for __mbstate_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "__mbstate_t__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__mbstate_t), "::", stringify!(__count))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(__mbstate_t), "::", stringify!(__value))
    );
}
impl ::std::fmt::Debug for __mbstate_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "__mbstate_t {{ __count: {:?}, __value: {:?} }}", self.__count, self.__value)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_G_fpos_t), "::", stringify!(__pos))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_G_fpos_t), "::", stringify!(__state))
    );
}
impl ::std::fmt::Debug for _G_fpos_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_G_fpos_t {{ __pos: {:?}, __state: {:?} }}", self.__pos, self.__state)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_G_fpos64_t), "::", stringify!(__pos))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_G_fpos64_t), "::", stringify!(__state))
    );
}
impl ::std::fmt::Debug for _G_fpos64_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_G_fpos64_t {{ __pos: {:?}, __state: {:?} }}", self.__pos, self.__state)
    }
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_IO_marker), "::", stringify!(_next))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_IO_marker), "::", stringify!(_sbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_IO_marker), "::", stringify!(_pos))
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_flags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_IO_read_ptr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_IO_read_end))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_IO_read_base))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_IO_write_base))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_IO_write_ptr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_IO_write_end))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_IO_buf_base))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_IO_buf_end))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_IO_save_base))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_IO_backup_base))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_IO_save_end))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_markers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_chain))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_fileno))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_flags2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_old_offset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_cur_column))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_vtable_offset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_shortbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_lock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_offset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(__pad1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(__pad2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(__pad3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(__pad4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(__pad5))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_mode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_unused2))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int, arg3: __ssize_t)
        -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void, arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type off_t = __off_t;
pub type fpos_t = _G_fpos_t;
extern "C" {
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __s: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum idtype_t {
    P_ALL = 0,
    P_PID = 1,
    P_PGID = 2,
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(::std::mem::size_of::<div_t>(), 8usize, concat!("Size of: ", stringify!(div_t)));
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(div_t), "::", stringify!(quot))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(div_t), "::", stringify!(rem))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(::std::mem::size_of::<ldiv_t>(), 16usize, concat!("Size of: ", stringify!(ldiv_t)));
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ldiv_t), "::", stringify!(quot))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ldiv_t), "::", stringify!(rem))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(lldiv_t), "::", stringify!(quot))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(lldiv_t), "::", stringify!(rem))
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__sigset_t), "::", stringify!(__val))
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(timeval), "::", stringify!(tv_sec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(timeval), "::", stringify!(tv_usec))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(timespec), "::", stringify!(tv_sec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(timespec), "::", stringify!(tv_nsec))
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(::std::mem::size_of::<fd_set>(), 128usize, concat!("Size of: ", stringify!(fd_set)));
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(fd_set), "::", stringify!(__fds_bits))
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(__pthread_rwlock_arch_t), "::", stringify!(__pad3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!("Offset of field: ", stringify!(__pthread_rwlock_arch_t), "::", stringify!(__pad4))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!("Offset of field: ", stringify!(__pthread_rwlock_arch_t), "::", stringify!(__pad1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(__pthread_rwlock_arch_t), "::", stringify!(__pad2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__pthread_internal_list), "::", stringify!(__prev))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(__pthread_internal_list), "::", stringify!(__next))
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__pthread_mutex_s), "::", stringify!(__lock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(__pthread_mutex_s), "::", stringify!(__count))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(__pthread_mutex_s), "::", stringify!(__owner))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(__pthread_mutex_s), "::", stringify!(__nusers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(__pthread_mutex_s), "::", stringify!(__kind))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!("Offset of field: ", stringify!(__pthread_mutex_s), "::", stringify!(__spins))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!("Offset of field: ", stringify!(__pthread_mutex_s), "::", stringify!(__elision))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(__pthread_mutex_s), "::", stringify!(__list))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
impl ::std::fmt::Debug for __pthread_cond_s__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "__pthread_cond_s__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
impl ::std::fmt::Debug for __pthread_cond_s__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "__pthread_cond_s__bindgen_ty_2 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(__pthread_cond_s), "::", stringify!(__g_refs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(__pthread_cond_s), "::", stringify!(__g_size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!("Offset of field: ", stringify!(__pthread_cond_s), "::", stringify!(__wrefs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(__pthread_cond_s), "::", stringify!(__g_signals))
    );
}
impl ::std::fmt::Debug for __pthread_cond_s {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "__pthread_cond_s {{ __bindgen_anon_1: {:?}, __bindgen_anon_2: {:?}, __g_refs: {:?}, __g_size: {:?}, __g1_orig_size: {:?}, __wrefs: {:?}, __g_signals: {:?} }}" , self . __bindgen_anon_1 , self . __bindgen_anon_2 , self . __g_refs , self . __g_size , self . __g1_orig_size , self . __wrefs , self . __g_signals )
    }
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_mutexattr_t), "::", stringify!(__size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_mutexattr_t), "::", stringify!(__align))
    );
}
impl ::std::fmt::Debug for pthread_mutexattr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_mutexattr_t {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_condattr_t), "::", stringify!(__size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_condattr_t), "::", stringify!(__align))
    );
}
impl ::std::fmt::Debug for pthread_condattr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_condattr_t {{ union }}")
    }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_attr_t), "::", stringify!(__size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_attr_t), "::", stringify!(__align))
    );
}
impl ::std::fmt::Debug for pthread_attr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_attr_t {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_mutex_t), "::", stringify!(__data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_mutex_t), "::", stringify!(__size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_mutex_t), "::", stringify!(__align))
    );
}
impl ::std::fmt::Debug for pthread_mutex_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_mutex_t {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_cond_t), "::", stringify!(__data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_cond_t), "::", stringify!(__size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_cond_t), "::", stringify!(__align))
    );
}
impl ::std::fmt::Debug for pthread_cond_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_cond_t {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_rwlock_t), "::", stringify!(__data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_rwlock_t), "::", stringify!(__size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_rwlock_t), "::", stringify!(__align))
    );
}
impl ::std::fmt::Debug for pthread_rwlock_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_rwlock_t {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_rwlockattr_t), "::", stringify!(__size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_rwlockattr_t), "::", stringify!(__align))
    );
}
impl ::std::fmt::Debug for pthread_rwlockattr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_rwlockattr_t {{ union }}")
    }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_barrier_t), "::", stringify!(__size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_barrier_t), "::", stringify!(__align))
    );
}
impl ::std::fmt::Debug for pthread_barrier_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_barrier_t {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_barrierattr_t), "::", stringify!(__size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_barrierattr_t), "::", stringify!(__align))
    );
}
impl ::std::fmt::Debug for pthread_barrierattr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_barrierattr_t {{ union }}")
    }
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(random_data), "::", stringify!(fptr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(random_data), "::", stringify!(rptr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(random_data), "::", stringify!(state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(random_data), "::", stringify!(rand_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!("Offset of field: ", stringify!(random_data), "::", stringify!(rand_deg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(random_data), "::", stringify!(rand_sep))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(random_data), "::", stringify!(end_ptr))
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(drand48_data), "::", stringify!(__x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!("Offset of field: ", stringify!(drand48_data), "::", stringify!(__old_x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(drand48_data), "::", stringify!(__c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!("Offset of field: ", stringify!(drand48_data), "::", stringify!(__init))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(drand48_data), "::", stringify!(__a))
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type magick_int8_t = ::std::os::raw::c_schar;
pub type magick_uint8_t = ::std::os::raw::c_uchar;
pub type magick_int16_t = ::std::os::raw::c_short;
pub type magick_uint16_t = ::std::os::raw::c_ushort;
pub type magick_int32_t = ::std::os::raw::c_int;
pub type magick_uint32_t = ::std::os::raw::c_uint;
pub type magick_int64_t = ::std::os::raw::c_long;
pub type magick_uint64_t = ::std::os::raw::c_ulong;
pub type magick_uintmax_t = ::std::os::raw::c_ulong;
pub type magick_uintptr_t = ::std::os::raw::c_ulong;
pub type magick_off_t = magick_int64_t;
pub type ImagePtr = *mut _Image;
pub type _Ascii85InfoPtr_ = *mut _Ascii85Info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BlobInfo {
    _unused: [u8; 0],
}
pub type _BlobInfoPtr_ = *mut _BlobInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CacheInfo {
    _unused: [u8; 0],
}
pub type _CacheInfoPtr_ = *mut _CacheInfo;
pub type _ImageAttributePtr_ = *mut _ImageAttribute;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SemaphoreInfo {
    _unused: [u8; 0],
}
pub type _SemaphoreInfoPtr_ = *mut _SemaphoreInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ThreadViewSet {
    _unused: [u8; 0],
}
pub type _ThreadViewSetPtr_ = *mut _ThreadViewSet;
pub type ViewInfo = *mut ::std::os::raw::c_void;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ColorspaceType {
    UndefinedColorspace = 0,
    RGBColorspace = 1,
    GRAYColorspace = 2,
    TransparentColorspace = 3,
    OHTAColorspace = 4,
    XYZColorspace = 5,
    YCCColorspace = 6,
    YIQColorspace = 7,
    YPbPrColorspace = 8,
    YUVColorspace = 9,
    CMYKColorspace = 10,
    sRGBColorspace = 11,
    HSLColorspace = 12,
    HWBColorspace = 13,
    LABColorspace = 14,
    CineonLogRGBColorspace = 15,
    Rec601LumaColorspace = 16,
    Rec601YCbCrColorspace = 17,
    Rec709LumaColorspace = 18,
    Rec709YCbCrColorspace = 19,
}
extern "C" {
    pub fn RGBTransformImage(arg1: ImagePtr, arg2: ColorspaceType) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn TransformColorspace(arg1: ImagePtr, arg2: ColorspaceType) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn TransformRGBImage(arg1: ImagePtr, arg2: ColorspaceType) -> ::std::os::raw::c_uint;
}
impl ExceptionBaseType {
    pub const ResourceLimitBase: ExceptionBaseType = ExceptionBaseType::ResourceBase;
}
impl ExceptionBaseType {
    pub const AnnotateBase: ExceptionBaseType = ExceptionBaseType::TypeBase;
}
impl ExceptionBaseType {
    pub const RenderBase: ExceptionBaseType = ExceptionBaseType::DrawBase;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ExceptionBaseType {
    UndefinedExceptionBase = 0,
    ExceptionBase = 1,
    ResourceBase = 2,
    TypeBase = 5,
    OptionBase = 10,
    DelegateBase = 15,
    MissingDelegateBase = 20,
    CorruptImageBase = 25,
    FileOpenBase = 30,
    BlobBase = 35,
    StreamBase = 40,
    CacheBase = 45,
    CoderBase = 50,
    ModuleBase = 55,
    DrawBase = 60,
    ImageBase = 65,
    WandBase = 67,
    TemporaryFileBase = 70,
    TransformBase = 75,
    XServerBase = 80,
    X11Base = 81,
    UserBase = 82,
    MonitorBase = 85,
    LocaleBase = 86,
    DeprecateBase = 87,
    RegistryBase = 90,
    ConfigureBase = 95,
}
impl ExceptionType {
    pub const ResourceLimitEvent: ExceptionType = ExceptionType::ResourceEvent;
}
impl ExceptionType {
    pub const AnnotateEvent: ExceptionType = ExceptionType::TypeEvent;
}
impl ExceptionType {
    pub const RenderEvent: ExceptionType = ExceptionType::DrawEvent;
}
impl ExceptionType {
    pub const ResourceLimitWarning: ExceptionType = ExceptionType::ResourceWarning;
}
impl ExceptionType {
    pub const AnnotateWarning: ExceptionType = ExceptionType::TypeWarning;
}
impl ExceptionType {
    pub const RenderWarning: ExceptionType = ExceptionType::DrawWarning;
}
impl ExceptionType {
    pub const ResourceLimitError: ExceptionType = ExceptionType::ResourceError;
}
impl ExceptionType {
    pub const AnnotateError: ExceptionType = ExceptionType::TypeError;
}
impl ExceptionType {
    pub const RenderError: ExceptionType = ExceptionType::DrawError;
}
impl ExceptionType {
    pub const ResourceLimitFatalError: ExceptionType = ExceptionType::ResourceFatalError;
}
impl ExceptionType {
    pub const AnnotateFatalError: ExceptionType = ExceptionType::TypeFatalError;
}
impl ExceptionType {
    pub const RenderFatalError: ExceptionType = ExceptionType::DrawFatalError;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ExceptionType {
    UndefinedException = 0,
    EventException = 100,
    ExceptionEvent = 101,
    ResourceEvent = 102,
    TypeEvent = 105,
    OptionEvent = 110,
    DelegateEvent = 115,
    MissingDelegateEvent = 120,
    CorruptImageEvent = 125,
    FileOpenEvent = 130,
    BlobEvent = 135,
    StreamEvent = 140,
    CacheEvent = 145,
    CoderEvent = 150,
    ModuleEvent = 155,
    DrawEvent = 160,
    ImageEvent = 165,
    WandEvent = 167,
    TemporaryFileEvent = 170,
    TransformEvent = 175,
    XServerEvent = 180,
    X11Event = 181,
    UserEvent = 182,
    MonitorEvent = 185,
    LocaleEvent = 186,
    DeprecateEvent = 187,
    RegistryEvent = 190,
    ConfigureEvent = 195,
    WarningException = 300,
    ExceptionWarning = 301,
    ResourceWarning = 302,
    TypeWarning = 305,
    OptionWarning = 310,
    DelegateWarning = 315,
    MissingDelegateWarning = 320,
    CorruptImageWarning = 325,
    FileOpenWarning = 330,
    BlobWarning = 335,
    StreamWarning = 340,
    CacheWarning = 345,
    CoderWarning = 350,
    ModuleWarning = 355,
    DrawWarning = 360,
    ImageWarning = 365,
    WandWarning = 367,
    TemporaryFileWarning = 370,
    TransformWarning = 375,
    XServerWarning = 380,
    X11Warning = 381,
    UserWarning = 382,
    MonitorWarning = 385,
    LocaleWarning = 386,
    DeprecateWarning = 387,
    RegistryWarning = 390,
    ConfigureWarning = 395,
    ErrorException = 400,
    ExceptionError = 401,
    ResourceError = 402,
    TypeError = 405,
    OptionError = 410,
    DelegateError = 415,
    MissingDelegateError = 420,
    CorruptImageError = 425,
    FileOpenError = 430,
    BlobError = 435,
    StreamError = 440,
    CacheError = 445,
    CoderError = 450,
    ModuleError = 455,
    DrawError = 460,
    ImageError = 465,
    WandError = 467,
    TemporaryFileError = 470,
    TransformError = 475,
    XServerError = 480,
    X11Error = 481,
    UserError = 482,
    MonitorError = 485,
    LocaleError = 486,
    DeprecateError = 487,
    RegistryError = 490,
    ConfigureError = 495,
    FatalErrorException = 700,
    ExceptionFatalError = 701,
    ResourceFatalError = 702,
    TypeFatalError = 705,
    OptionFatalError = 710,
    DelegateFatalError = 715,
    MissingDelegateFatalError = 720,
    CorruptImageFatalError = 725,
    FileOpenFatalError = 730,
    BlobFatalError = 735,
    StreamFatalError = 740,
    CacheFatalError = 745,
    CoderFatalError = 750,
    ModuleFatalError = 755,
    DrawFatalError = 760,
    ImageFatalError = 765,
    WandFatalError = 767,
    TemporaryFileFatalError = 770,
    TransformFatalError = 775,
    XServerFatalError = 780,
    X11FatalError = 781,
    UserFatalError = 782,
    MonitorFatalError = 785,
    LocaleFatalError = 786,
    DeprecateFatalError = 787,
    RegistryFatalError = 790,
    ConfigureFatalError = 795,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ExceptionInfo {
    pub severity: ExceptionType,
    pub reason: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub error_number: ::std::os::raw::c_int,
    pub module: *mut ::std::os::raw::c_char,
    pub function: *mut ::std::os::raw::c_char,
    pub line: ::std::os::raw::c_ulong,
    pub signature: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__ExceptionInfo() {
    assert_eq!(
        ::std::mem::size_of::<_ExceptionInfo>(),
        64usize,
        concat!("Size of: ", stringify!(_ExceptionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_ExceptionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_ExceptionInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ExceptionInfo>())).severity as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_ExceptionInfo), "::", stringify!(severity))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ExceptionInfo>())).reason as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_ExceptionInfo), "::", stringify!(reason))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ExceptionInfo>())).description as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_ExceptionInfo), "::", stringify!(description))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ExceptionInfo>())).error_number as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_ExceptionInfo), "::", stringify!(error_number))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ExceptionInfo>())).module as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(_ExceptionInfo), "::", stringify!(module))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ExceptionInfo>())).function as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(_ExceptionInfo), "::", stringify!(function))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ExceptionInfo>())).line as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(_ExceptionInfo), "::", stringify!(line))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ExceptionInfo>())).signature as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(_ExceptionInfo), "::", stringify!(signature))
    );
}
pub type ExceptionInfo = _ExceptionInfo;
pub type ErrorHandler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ExceptionType,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ),
>;
pub type FatalErrorHandler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ExceptionType,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ),
>;
pub type WarningHandler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ExceptionType,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn GetLocaleExceptionMessage(
        arg1: ExceptionType,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetLocaleMessage(arg1: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SetErrorHandler(arg1: ErrorHandler) -> ErrorHandler;
}
extern "C" {
    pub fn SetFatalErrorHandler(arg1: FatalErrorHandler) -> FatalErrorHandler;
}
extern "C" {
    pub fn CatchException(arg1: *const ExceptionInfo);
}
extern "C" {
    pub fn CopyException(copy: *mut ExceptionInfo, original: *const ExceptionInfo);
}
extern "C" {
    pub fn DestroyExceptionInfo(arg1: *mut ExceptionInfo);
}
extern "C" {
    pub fn GetExceptionInfo(arg1: *mut ExceptionInfo);
}
extern "C" {
    pub fn MagickError(
        arg1: ExceptionType,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn MagickFatalError(
        arg1: ExceptionType,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn MagickWarning(
        arg1: ExceptionType,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _MagickError(
        arg1: ExceptionType,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _MagickFatalError(
        arg1: ExceptionType,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _MagickWarning(
        arg1: ExceptionType,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn SetExceptionInfo(arg1: *mut ExceptionInfo, arg2: ExceptionType);
}
extern "C" {
    pub fn ThrowException(
        arg1: *mut ExceptionInfo,
        arg2: ExceptionType,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ThrowLoggedException(
        exception: *mut ExceptionInfo,
        severity: ExceptionType,
        reason: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        module: *const ::std::os::raw::c_char,
        function: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn SetWarningHandler(arg1: WarningHandler) -> WarningHandler;
}
impl LogEventType {
    pub const NoEventsMask: LogEventType = LogEventType::UndefinedEventMask;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum LogEventType {
    UndefinedEventMask = 0,
    ConfigureEventMask = 1,
    AnnotateEventMask = 2,
    RenderEventMask = 4,
    TransformEventMask = 8,
    LocaleEventMask = 16,
    CoderEventMask = 32,
    X11EventMask = 64,
    CacheEventMask = 128,
    BlobEventMask = 256,
    DeprecateEventMask = 512,
    UserEventMask = 1024,
    ResourceEventMask = 2048,
    TemporaryFileEventMask = 4096,
    ExceptionEventMask = 458752,
    OptionEventMask = 16384,
    InformationEventMask = 32768,
    WarningEventMask = 65536,
    ErrorEventMask = 131072,
    FatalErrorEventMask = 262144,
    AllEventsMask = 2147483647,
}
pub type LogMethod = ::std::option::Option<
    unsafe extern "C" fn(arg1: ExceptionType, arg2: *const ::std::os::raw::c_char),
>;
extern "C" {
    pub fn IsEventLogging() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn LogMagickEvent(
        type_: ExceptionType,
        module: *const ::std::os::raw::c_char,
        function: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_ulong,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn LogMagickEventList(
        type_: ExceptionType,
        module: *const ::std::os::raw::c_char,
        function: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_ulong,
        format: *const ::std::os::raw::c_char,
        operands: *mut __va_list_tag,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SetLogEventMask(events: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn SetLogFormat(format: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn SetLogMethod(arg1: LogMethod);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TimerState {
    UndefinedTimerState = 0,
    StoppedTimerState = 1,
    RunningTimerState = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Timer {
    pub start: f64,
    pub stop: f64,
    pub total: f64,
}
#[test]
fn bindgen_test_layout__Timer() {
    assert_eq!(::std::mem::size_of::<_Timer>(), 24usize, concat!("Size of: ", stringify!(_Timer)));
    assert_eq!(
        ::std::mem::align_of::<_Timer>(),
        8usize,
        concat!("Alignment of ", stringify!(_Timer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Timer>())).start as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_Timer), "::", stringify!(start))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Timer>())).stop as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_Timer), "::", stringify!(stop))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Timer>())).total as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_Timer), "::", stringify!(total))
    );
}
pub type Timer = _Timer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TimerInfo {
    pub user: Timer,
    pub elapsed: Timer,
    pub state: TimerState,
    pub signature: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__TimerInfo() {
    assert_eq!(
        ::std::mem::size_of::<_TimerInfo>(),
        64usize,
        concat!("Size of: ", stringify!(_TimerInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_TimerInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_TimerInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TimerInfo>())).user as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_TimerInfo), "::", stringify!(user))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TimerInfo>())).elapsed as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_TimerInfo), "::", stringify!(elapsed))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TimerInfo>())).state as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(_TimerInfo), "::", stringify!(state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TimerInfo>())).signature as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(_TimerInfo), "::", stringify!(signature))
    );
}
pub type TimerInfo = _TimerInfo;
extern "C" {
    pub fn GetElapsedTime(arg1: *mut TimerInfo) -> f64;
}
extern "C" {
    pub fn GetUserTime(arg1: *mut TimerInfo) -> f64;
}
extern "C" {
    pub fn GetTimerResolution() -> f64;
}
extern "C" {
    pub fn ContinueTimer(arg1: *mut TimerInfo) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn GetTimerInfo(arg1: *mut TimerInfo);
}
extern "C" {
    pub fn ResetTimer(arg1: *mut TimerInfo);
}
pub type Quantum = ::std::os::raw::c_ushort;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AlphaType {
    UnspecifiedAlpha = 0,
    AssociatedAlpha = 1,
    UnassociatedAlpha = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ChannelType {
    UndefinedChannel = 0,
    RedChannel = 1,
    CyanChannel = 2,
    GreenChannel = 3,
    MagentaChannel = 4,
    BlueChannel = 5,
    YellowChannel = 6,
    OpacityChannel = 7,
    BlackChannel = 8,
    MatteChannel = 9,
    AllChannels = 10,
    GrayChannel = 11,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ClassType {
    UndefinedClass = 0,
    DirectClass = 1,
    PseudoClass = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum CompositeOperator {
    UndefinedCompositeOp = 0,
    OverCompositeOp = 1,
    InCompositeOp = 2,
    OutCompositeOp = 3,
    AtopCompositeOp = 4,
    XorCompositeOp = 5,
    PlusCompositeOp = 6,
    MinusCompositeOp = 7,
    AddCompositeOp = 8,
    SubtractCompositeOp = 9,
    DifferenceCompositeOp = 10,
    MultiplyCompositeOp = 11,
    BumpmapCompositeOp = 12,
    CopyCompositeOp = 13,
    CopyRedCompositeOp = 14,
    CopyGreenCompositeOp = 15,
    CopyBlueCompositeOp = 16,
    CopyOpacityCompositeOp = 17,
    ClearCompositeOp = 18,
    DissolveCompositeOp = 19,
    DisplaceCompositeOp = 20,
    ModulateCompositeOp = 21,
    ThresholdCompositeOp = 22,
    NoCompositeOp = 23,
    DarkenCompositeOp = 24,
    LightenCompositeOp = 25,
    HueCompositeOp = 26,
    SaturateCompositeOp = 27,
    ColorizeCompositeOp = 28,
    LuminizeCompositeOp = 29,
    ScreenCompositeOp = 30,
    OverlayCompositeOp = 31,
    CopyCyanCompositeOp = 32,
    CopyMagentaCompositeOp = 33,
    CopyYellowCompositeOp = 34,
    CopyBlackCompositeOp = 35,
    DivideCompositeOp = 36,
    HardLightCompositeOp = 37,
    ExclusionCompositeOp = 38,
    ColorDodgeCompositeOp = 39,
    ColorBurnCompositeOp = 40,
    SoftLightCompositeOp = 41,
    LinearBurnCompositeOp = 42,
    LinearDodgeCompositeOp = 43,
    LinearLightCompositeOp = 44,
    VividLightCompositeOp = 45,
    PinLightCompositeOp = 46,
    HardMixCompositeOp = 47,
}
impl CompressionType {
    pub const Group3Compression: CompressionType = CompressionType::FaxCompression;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum CompressionType {
    UndefinedCompression = 0,
    NoCompression = 1,
    BZipCompression = 2,
    FaxCompression = 3,
    Group4Compression = 4,
    JPEGCompression = 5,
    LosslessJPEGCompression = 6,
    LZWCompression = 7,
    RLECompression = 8,
    ZipCompression = 9,
    LZMACompression = 10,
    JPEG2000Compression = 11,
    JBIG1Compression = 12,
    JBIG2Compression = 13,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum DisposeType {
    UndefinedDispose = 0,
    NoneDispose = 1,
    BackgroundDispose = 2,
    PreviousDispose = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum EndianType {
    UndefinedEndian = 0,
    LSBEndian = 1,
    MSBEndian = 2,
    NativeEndian = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FilterTypes {
    UndefinedFilter = 0,
    PointFilter = 1,
    BoxFilter = 2,
    TriangleFilter = 3,
    HermiteFilter = 4,
    HanningFilter = 5,
    HammingFilter = 6,
    BlackmanFilter = 7,
    GaussianFilter = 8,
    QuadraticFilter = 9,
    CubicFilter = 10,
    CatromFilter = 11,
    MitchellFilter = 12,
    LanczosFilter = 13,
    BesselFilter = 14,
    SincFilter = 15,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum GeometryFlags {
    NoValue = 0,
    XValue = 1,
    YValue = 2,
    WidthValue = 4,
    HeightValue = 8,
    AllValues = 15,
    XNegative = 16,
    YNegative = 32,
    PercentValue = 4096,
    AspectValue = 8192,
    LessValue = 16384,
    GreaterValue = 32768,
    AreaValue = 65536,
    MinimumValue = 131072,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum GravityType {
    ForgetGravity = 0,
    NorthWestGravity = 1,
    NorthGravity = 2,
    NorthEastGravity = 3,
    WestGravity = 4,
    CenterGravity = 5,
    EastGravity = 6,
    SouthWestGravity = 7,
    SouthGravity = 8,
    SouthEastGravity = 9,
    StaticGravity = 10,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ImageType {
    UndefinedType = 0,
    BilevelType = 1,
    GrayscaleType = 2,
    GrayscaleMatteType = 3,
    PaletteType = 4,
    PaletteMatteType = 5,
    TrueColorType = 6,
    TrueColorMatteType = 7,
    ColorSeparationType = 8,
    ColorSeparationMatteType = 9,
    OptimizeType = 10,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum InterlaceType {
    UndefinedInterlace = 0,
    NoInterlace = 1,
    LineInterlace = 2,
    PlaneInterlace = 3,
    PartitionInterlace = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MontageMode {
    UndefinedMode = 0,
    FrameMode = 1,
    UnframeMode = 2,
    ConcatenateMode = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NoiseType {
    UniformNoise = 0,
    GaussianNoise = 1,
    MultiplicativeGaussianNoise = 2,
    ImpulseNoise = 3,
    LaplacianNoise = 4,
    PoissonNoise = 5,
    RandomNoise = 6,
    UndefinedNoise = 7,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum OrientationType {
    UndefinedOrientation = 0,
    TopLeftOrientation = 1,
    TopRightOrientation = 2,
    BottomRightOrientation = 3,
    BottomLeftOrientation = 4,
    LeftTopOrientation = 5,
    RightTopOrientation = 6,
    RightBottomOrientation = 7,
    LeftBottomOrientation = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PreviewType {
    UndefinedPreview = 0,
    RotatePreview = 1,
    ShearPreview = 2,
    RollPreview = 3,
    HuePreview = 4,
    SaturationPreview = 5,
    BrightnessPreview = 6,
    GammaPreview = 7,
    SpiffPreview = 8,
    DullPreview = 9,
    GrayscalePreview = 10,
    QuantizePreview = 11,
    DespecklePreview = 12,
    ReduceNoisePreview = 13,
    AddNoisePreview = 14,
    SharpenPreview = 15,
    BlurPreview = 16,
    ThresholdPreview = 17,
    EdgeDetectPreview = 18,
    SpreadPreview = 19,
    SolarizePreview = 20,
    ShadePreview = 21,
    RaisePreview = 22,
    SegmentPreview = 23,
    SwirlPreview = 24,
    ImplodePreview = 25,
    WavePreview = 26,
    OilPaintPreview = 27,
    CharcoalDrawingPreview = 28,
    JPEGPreview = 29,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum RenderingIntent {
    UndefinedIntent = 0,
    SaturationIntent = 1,
    PerceptualIntent = 2,
    AbsoluteIntent = 3,
    RelativeIntent = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ResolutionType {
    UndefinedResolution = 0,
    PixelsPerInchResolution = 1,
    PixelsPerCentimeterResolution = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AffineMatrix {
    pub sx: f64,
    pub rx: f64,
    pub ry: f64,
    pub sy: f64,
    pub tx: f64,
    pub ty: f64,
}
#[test]
fn bindgen_test_layout__AffineMatrix() {
    assert_eq!(
        ::std::mem::size_of::<_AffineMatrix>(),
        48usize,
        concat!("Size of: ", stringify!(_AffineMatrix))
    );
    assert_eq!(
        ::std::mem::align_of::<_AffineMatrix>(),
        8usize,
        concat!("Alignment of ", stringify!(_AffineMatrix))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_AffineMatrix>())).sx as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_AffineMatrix), "::", stringify!(sx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_AffineMatrix>())).rx as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_AffineMatrix), "::", stringify!(rx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_AffineMatrix>())).ry as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_AffineMatrix), "::", stringify!(ry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_AffineMatrix>())).sy as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_AffineMatrix), "::", stringify!(sy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_AffineMatrix>())).tx as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(_AffineMatrix), "::", stringify!(tx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_AffineMatrix>())).ty as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(_AffineMatrix), "::", stringify!(ty))
    );
}
pub type AffineMatrix = _AffineMatrix;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PrimaryInfo {
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[test]
fn bindgen_test_layout__PrimaryInfo() {
    assert_eq!(
        ::std::mem::size_of::<_PrimaryInfo>(),
        24usize,
        concat!("Size of: ", stringify!(_PrimaryInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_PrimaryInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_PrimaryInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PrimaryInfo>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_PrimaryInfo), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PrimaryInfo>())).y as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_PrimaryInfo), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PrimaryInfo>())).z as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_PrimaryInfo), "::", stringify!(z))
    );
}
pub type PrimaryInfo = _PrimaryInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ChromaticityInfo {
    pub red_primary: PrimaryInfo,
    pub green_primary: PrimaryInfo,
    pub blue_primary: PrimaryInfo,
    pub white_point: PrimaryInfo,
}
#[test]
fn bindgen_test_layout__ChromaticityInfo() {
    assert_eq!(
        ::std::mem::size_of::<_ChromaticityInfo>(),
        96usize,
        concat!("Size of: ", stringify!(_ChromaticityInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_ChromaticityInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_ChromaticityInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ChromaticityInfo>())).red_primary as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_ChromaticityInfo), "::", stringify!(red_primary))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ChromaticityInfo>())).green_primary as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ChromaticityInfo),
            "::",
            stringify!(green_primary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ChromaticityInfo>())).blue_primary as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(_ChromaticityInfo), "::", stringify!(blue_primary))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ChromaticityInfo>())).white_point as *const _ as usize },
        72usize,
        concat!("Offset of field: ", stringify!(_ChromaticityInfo), "::", stringify!(white_point))
    );
}
pub type ChromaticityInfo = _ChromaticityInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PixelPacket {
    pub blue: Quantum,
    pub green: Quantum,
    pub red: Quantum,
    pub opacity: Quantum,
}
#[test]
fn bindgen_test_layout__PixelPacket() {
    assert_eq!(
        ::std::mem::size_of::<_PixelPacket>(),
        8usize,
        concat!("Size of: ", stringify!(_PixelPacket))
    );
    assert_eq!(
        ::std::mem::align_of::<_PixelPacket>(),
        2usize,
        concat!("Alignment of ", stringify!(_PixelPacket))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PixelPacket>())).blue as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_PixelPacket), "::", stringify!(blue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PixelPacket>())).green as *const _ as usize },
        2usize,
        concat!("Offset of field: ", stringify!(_PixelPacket), "::", stringify!(green))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PixelPacket>())).red as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(_PixelPacket), "::", stringify!(red))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PixelPacket>())).opacity as *const _ as usize },
        6usize,
        concat!("Offset of field: ", stringify!(_PixelPacket), "::", stringify!(opacity))
    );
}
pub type PixelPacket = _PixelPacket;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DoublePixelPacket {
    pub red: f64,
    pub green: f64,
    pub blue: f64,
    pub opacity: f64,
}
#[test]
fn bindgen_test_layout__DoublePixelPacket() {
    assert_eq!(
        ::std::mem::size_of::<_DoublePixelPacket>(),
        32usize,
        concat!("Size of: ", stringify!(_DoublePixelPacket))
    );
    assert_eq!(
        ::std::mem::align_of::<_DoublePixelPacket>(),
        8usize,
        concat!("Alignment of ", stringify!(_DoublePixelPacket))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DoublePixelPacket>())).red as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_DoublePixelPacket), "::", stringify!(red))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DoublePixelPacket>())).green as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_DoublePixelPacket), "::", stringify!(green))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DoublePixelPacket>())).blue as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_DoublePixelPacket), "::", stringify!(blue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DoublePixelPacket>())).opacity as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_DoublePixelPacket), "::", stringify!(opacity))
    );
}
pub type DoublePixelPacket = _DoublePixelPacket;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FloatPixelPacket {
    pub red: f32,
    pub green: f32,
    pub blue: f32,
    pub opacity: f32,
}
#[test]
fn bindgen_test_layout__FloatPixelPacket() {
    assert_eq!(
        ::std::mem::size_of::<_FloatPixelPacket>(),
        16usize,
        concat!("Size of: ", stringify!(_FloatPixelPacket))
    );
    assert_eq!(
        ::std::mem::align_of::<_FloatPixelPacket>(),
        4usize,
        concat!("Alignment of ", stringify!(_FloatPixelPacket))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FloatPixelPacket>())).red as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_FloatPixelPacket), "::", stringify!(red))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FloatPixelPacket>())).green as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(_FloatPixelPacket), "::", stringify!(green))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FloatPixelPacket>())).blue as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_FloatPixelPacket), "::", stringify!(blue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FloatPixelPacket>())).opacity as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(_FloatPixelPacket), "::", stringify!(opacity))
    );
}
pub type FloatPixelPacket = _FloatPixelPacket;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ErrorInfo {
    pub mean_error_per_pixel: f64,
    pub normalized_mean_error: f64,
    pub normalized_maximum_error: f64,
}
#[test]
fn bindgen_test_layout__ErrorInfo() {
    assert_eq!(
        ::std::mem::size_of::<_ErrorInfo>(),
        24usize,
        concat!("Size of: ", stringify!(_ErrorInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_ErrorInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_ErrorInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ErrorInfo>())).mean_error_per_pixel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ErrorInfo),
            "::",
            stringify!(mean_error_per_pixel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ErrorInfo>())).normalized_mean_error as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ErrorInfo),
            "::",
            stringify!(normalized_mean_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ErrorInfo>())).normalized_maximum_error as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ErrorInfo),
            "::",
            stringify!(normalized_maximum_error)
        )
    );
}
pub type ErrorInfo = _ErrorInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FrameInfo {
    pub width: ::std::os::raw::c_ulong,
    pub height: ::std::os::raw::c_ulong,
    pub x: ::std::os::raw::c_long,
    pub y: ::std::os::raw::c_long,
    pub inner_bevel: ::std::os::raw::c_long,
    pub outer_bevel: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__FrameInfo() {
    assert_eq!(
        ::std::mem::size_of::<_FrameInfo>(),
        48usize,
        concat!("Size of: ", stringify!(_FrameInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_FrameInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_FrameInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FrameInfo>())).width as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_FrameInfo), "::", stringify!(width))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FrameInfo>())).height as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_FrameInfo), "::", stringify!(height))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FrameInfo>())).x as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_FrameInfo), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FrameInfo>())).y as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_FrameInfo), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FrameInfo>())).inner_bevel as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(_FrameInfo), "::", stringify!(inner_bevel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FrameInfo>())).outer_bevel as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(_FrameInfo), "::", stringify!(outer_bevel))
    );
}
pub type FrameInfo = _FrameInfo;
pub type IndexPacket = Quantum;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LongPixelPacket {
    pub red: ::std::os::raw::c_ulong,
    pub green: ::std::os::raw::c_ulong,
    pub blue: ::std::os::raw::c_ulong,
    pub opacity: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__LongPixelPacket() {
    assert_eq!(
        ::std::mem::size_of::<_LongPixelPacket>(),
        32usize,
        concat!("Size of: ", stringify!(_LongPixelPacket))
    );
    assert_eq!(
        ::std::mem::align_of::<_LongPixelPacket>(),
        8usize,
        concat!("Alignment of ", stringify!(_LongPixelPacket))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LongPixelPacket>())).red as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_LongPixelPacket), "::", stringify!(red))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LongPixelPacket>())).green as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_LongPixelPacket), "::", stringify!(green))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LongPixelPacket>())).blue as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_LongPixelPacket), "::", stringify!(blue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LongPixelPacket>())).opacity as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_LongPixelPacket), "::", stringify!(opacity))
    );
}
pub type LongPixelPacket = _LongPixelPacket;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MontageInfo {
    pub geometry: *mut ::std::os::raw::c_char,
    pub tile: *mut ::std::os::raw::c_char,
    pub title: *mut ::std::os::raw::c_char,
    pub frame: *mut ::std::os::raw::c_char,
    pub texture: *mut ::std::os::raw::c_char,
    pub font: *mut ::std::os::raw::c_char,
    pub pointsize: f64,
    pub border_width: ::std::os::raw::c_ulong,
    pub shadow: ::std::os::raw::c_uint,
    pub fill: PixelPacket,
    pub stroke: PixelPacket,
    pub background_color: PixelPacket,
    pub border_color: PixelPacket,
    pub matte_color: PixelPacket,
    pub gravity: GravityType,
    pub filename: [::std::os::raw::c_char; 2053usize],
    pub signature: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__MontageInfo() {
    assert_eq!(
        ::std::mem::size_of::<_MontageInfo>(),
        2176usize,
        concat!("Size of: ", stringify!(_MontageInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_MontageInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_MontageInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MontageInfo>())).geometry as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_MontageInfo), "::", stringify!(geometry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MontageInfo>())).tile as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_MontageInfo), "::", stringify!(tile))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MontageInfo>())).title as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_MontageInfo), "::", stringify!(title))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MontageInfo>())).frame as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_MontageInfo), "::", stringify!(frame))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MontageInfo>())).texture as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(_MontageInfo), "::", stringify!(texture))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MontageInfo>())).font as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(_MontageInfo), "::", stringify!(font))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MontageInfo>())).pointsize as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(_MontageInfo), "::", stringify!(pointsize))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MontageInfo>())).border_width as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(_MontageInfo), "::", stringify!(border_width))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MontageInfo>())).shadow as *const _ as usize },
        64usize,
        concat!("Offset of field: ", stringify!(_MontageInfo), "::", stringify!(shadow))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MontageInfo>())).fill as *const _ as usize },
        68usize,
        concat!("Offset of field: ", stringify!(_MontageInfo), "::", stringify!(fill))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MontageInfo>())).stroke as *const _ as usize },
        76usize,
        concat!("Offset of field: ", stringify!(_MontageInfo), "::", stringify!(stroke))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MontageInfo>())).background_color as *const _ as usize },
        84usize,
        concat!("Offset of field: ", stringify!(_MontageInfo), "::", stringify!(background_color))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MontageInfo>())).border_color as *const _ as usize },
        92usize,
        concat!("Offset of field: ", stringify!(_MontageInfo), "::", stringify!(border_color))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MontageInfo>())).matte_color as *const _ as usize },
        100usize,
        concat!("Offset of field: ", stringify!(_MontageInfo), "::", stringify!(matte_color))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MontageInfo>())).gravity as *const _ as usize },
        108usize,
        concat!("Offset of field: ", stringify!(_MontageInfo), "::", stringify!(gravity))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MontageInfo>())).filename as *const _ as usize },
        112usize,
        concat!("Offset of field: ", stringify!(_MontageInfo), "::", stringify!(filename))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MontageInfo>())).signature as *const _ as usize },
        2168usize,
        concat!("Offset of field: ", stringify!(_MontageInfo), "::", stringify!(signature))
    );
}
impl ::std::fmt::Debug for _MontageInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "_MontageInfo {{ geometry: {:?}, tile: {:?}, title: {:?}, frame: {:?}, texture: {:?}, font: {:?}, pointsize: {:?}, border_width: {:?}, shadow: {:?}, fill: {:?}, stroke: {:?}, background_color: {:?}, border_color: {:?}, matte_color: {:?}, gravity: {:?}, filename: [{}], signature: {:?} }}" , self . geometry , self . tile , self . title , self . frame , self . texture , self . font , self . pointsize , self . border_width , self . shadow , self . fill , self . stroke , self . background_color , self . border_color , self . matte_color , self . gravity , self . filename . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . signature )
    }
}
pub type MontageInfo = _MontageInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ProfileInfo {
    pub length: usize,
    pub name: *mut ::std::os::raw::c_char,
    pub info: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__ProfileInfo() {
    assert_eq!(
        ::std::mem::size_of::<_ProfileInfo>(),
        24usize,
        concat!("Size of: ", stringify!(_ProfileInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_ProfileInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_ProfileInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ProfileInfo>())).length as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_ProfileInfo), "::", stringify!(length))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ProfileInfo>())).name as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_ProfileInfo), "::", stringify!(name))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ProfileInfo>())).info as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_ProfileInfo), "::", stringify!(info))
    );
}
pub type ProfileInfo = _ProfileInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RectangleInfo {
    pub width: ::std::os::raw::c_ulong,
    pub height: ::std::os::raw::c_ulong,
    pub x: ::std::os::raw::c_long,
    pub y: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__RectangleInfo() {
    assert_eq!(
        ::std::mem::size_of::<_RectangleInfo>(),
        32usize,
        concat!("Size of: ", stringify!(_RectangleInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_RectangleInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_RectangleInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RectangleInfo>())).width as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_RectangleInfo), "::", stringify!(width))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RectangleInfo>())).height as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_RectangleInfo), "::", stringify!(height))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RectangleInfo>())).x as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_RectangleInfo), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RectangleInfo>())).y as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_RectangleInfo), "::", stringify!(y))
    );
}
pub type RectangleInfo = _RectangleInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SegmentInfo {
    pub x1: f64,
    pub y1: f64,
    pub x2: f64,
    pub y2: f64,
}
#[test]
fn bindgen_test_layout__SegmentInfo() {
    assert_eq!(
        ::std::mem::size_of::<_SegmentInfo>(),
        32usize,
        concat!("Size of: ", stringify!(_SegmentInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_SegmentInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_SegmentInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SegmentInfo>())).x1 as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_SegmentInfo), "::", stringify!(x1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SegmentInfo>())).y1 as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_SegmentInfo), "::", stringify!(y1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SegmentInfo>())).x2 as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_SegmentInfo), "::", stringify!(x2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SegmentInfo>())).y2 as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_SegmentInfo), "::", stringify!(y2))
    );
}
pub type SegmentInfo = _SegmentInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ImageExtra {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _Image {
    pub storage_class: ClassType,
    pub colorspace: ColorspaceType,
    pub compression: CompressionType,
    pub dither: ::std::os::raw::c_uint,
    pub matte: ::std::os::raw::c_uint,
    pub columns: ::std::os::raw::c_ulong,
    pub rows: ::std::os::raw::c_ulong,
    pub colors: ::std::os::raw::c_uint,
    pub depth: ::std::os::raw::c_uint,
    pub colormap: *mut PixelPacket,
    pub background_color: PixelPacket,
    pub border_color: PixelPacket,
    pub matte_color: PixelPacket,
    pub gamma: f64,
    pub chromaticity: ChromaticityInfo,
    pub orientation: OrientationType,
    pub rendering_intent: RenderingIntent,
    pub units: ResolutionType,
    pub montage: *mut ::std::os::raw::c_char,
    pub directory: *mut ::std::os::raw::c_char,
    pub geometry: *mut ::std::os::raw::c_char,
    pub offset: ::std::os::raw::c_long,
    pub x_resolution: f64,
    pub y_resolution: f64,
    pub page: RectangleInfo,
    pub tile_info: RectangleInfo,
    pub blur: f64,
    pub fuzz: f64,
    pub filter: FilterTypes,
    pub interlace: InterlaceType,
    pub endian: EndianType,
    pub gravity: GravityType,
    pub compose: CompositeOperator,
    pub dispose: DisposeType,
    pub scene: ::std::os::raw::c_ulong,
    pub delay: ::std::os::raw::c_ulong,
    pub iterations: ::std::os::raw::c_ulong,
    pub total_colors: ::std::os::raw::c_ulong,
    pub start_loop: ::std::os::raw::c_long,
    pub error: ErrorInfo,
    pub timer: TimerInfo,
    pub client_data: *mut ::std::os::raw::c_void,
    pub filename: [::std::os::raw::c_char; 2053usize],
    pub magick_filename: [::std::os::raw::c_char; 2053usize],
    pub magick: [::std::os::raw::c_char; 2053usize],
    pub magick_columns: ::std::os::raw::c_ulong,
    pub magick_rows: ::std::os::raw::c_ulong,
    pub exception: ExceptionInfo,
    pub previous: *mut _Image,
    pub next: *mut _Image,
    pub profiles: *mut ::std::os::raw::c_void,
    pub is_monochrome: ::std::os::raw::c_uint,
    pub is_grayscale: ::std::os::raw::c_uint,
    pub taint: ::std::os::raw::c_uint,
    pub extra: *mut _ImageExtra,
    pub ping: ::std::os::raw::c_uint,
    pub cache: _CacheInfoPtr_,
    pub default_views: _ThreadViewSetPtr_,
    pub attributes: _ImageAttributePtr_,
    pub ascii85: _Ascii85InfoPtr_,
    pub blob: _BlobInfoPtr_,
    pub reference_count: ::std::os::raw::c_long,
    pub semaphore: _SemaphoreInfoPtr_,
    pub logging: ::std::os::raw::c_uint,
    pub list: *mut _Image,
    pub signature: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__Image() {
    assert_eq!(
        ::std::mem::size_of::<_Image>(),
        6864usize,
        concat!("Size of: ", stringify!(_Image))
    );
    assert_eq!(
        ::std::mem::align_of::<_Image>(),
        8usize,
        concat!("Alignment of ", stringify!(_Image))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).storage_class as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(storage_class))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).colorspace as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(colorspace))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).compression as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(compression))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).dither as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(dither))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).matte as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(matte))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).columns as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(columns))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).rows as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(rows))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).colors as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(colors))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).depth as *const _ as usize },
        44usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(depth))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).colormap as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(colormap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).background_color as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(background_color))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).border_color as *const _ as usize },
        64usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(border_color))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).matte_color as *const _ as usize },
        72usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(matte_color))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).gamma as *const _ as usize },
        80usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(gamma))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).chromaticity as *const _ as usize },
        88usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(chromaticity))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).orientation as *const _ as usize },
        184usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(orientation))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).rendering_intent as *const _ as usize },
        188usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(rendering_intent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).units as *const _ as usize },
        192usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(units))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).montage as *const _ as usize },
        200usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(montage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).directory as *const _ as usize },
        208usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(directory))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).geometry as *const _ as usize },
        216usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(geometry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).offset as *const _ as usize },
        224usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(offset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).x_resolution as *const _ as usize },
        232usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(x_resolution))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).y_resolution as *const _ as usize },
        240usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(y_resolution))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).page as *const _ as usize },
        248usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(page))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).tile_info as *const _ as usize },
        280usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(tile_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).blur as *const _ as usize },
        312usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(blur))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).fuzz as *const _ as usize },
        320usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(fuzz))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).filter as *const _ as usize },
        328usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(filter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).interlace as *const _ as usize },
        332usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(interlace))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).endian as *const _ as usize },
        336usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(endian))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).gravity as *const _ as usize },
        340usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(gravity))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).compose as *const _ as usize },
        344usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(compose))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).dispose as *const _ as usize },
        348usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(dispose))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).scene as *const _ as usize },
        352usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(scene))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).delay as *const _ as usize },
        360usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(delay))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).iterations as *const _ as usize },
        368usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(iterations))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).total_colors as *const _ as usize },
        376usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(total_colors))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).start_loop as *const _ as usize },
        384usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(start_loop))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).error as *const _ as usize },
        392usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(error))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).timer as *const _ as usize },
        416usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(timer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).client_data as *const _ as usize },
        480usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(client_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).filename as *const _ as usize },
        488usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(filename))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).magick_filename as *const _ as usize },
        2541usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(magick_filename))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).magick as *const _ as usize },
        4594usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(magick))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).magick_columns as *const _ as usize },
        6648usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(magick_columns))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).magick_rows as *const _ as usize },
        6656usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(magick_rows))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).exception as *const _ as usize },
        6664usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(exception))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).previous as *const _ as usize },
        6728usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(previous))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).next as *const _ as usize },
        6736usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(next))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).profiles as *const _ as usize },
        6744usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(profiles))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).is_monochrome as *const _ as usize },
        6752usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(is_monochrome))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).is_grayscale as *const _ as usize },
        6756usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(is_grayscale))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).taint as *const _ as usize },
        6760usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(taint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).extra as *const _ as usize },
        6768usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(extra))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).ping as *const _ as usize },
        6776usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(ping))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).cache as *const _ as usize },
        6784usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(cache))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).default_views as *const _ as usize },
        6792usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(default_views))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).attributes as *const _ as usize },
        6800usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(attributes))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).ascii85 as *const _ as usize },
        6808usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(ascii85))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).blob as *const _ as usize },
        6816usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(blob))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).reference_count as *const _ as usize },
        6824usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(reference_count))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).semaphore as *const _ as usize },
        6832usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(semaphore))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).logging as *const _ as usize },
        6840usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(logging))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).list as *const _ as usize },
        6848usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Image>())).signature as *const _ as usize },
        6856usize,
        concat!("Offset of field: ", stringify!(_Image), "::", stringify!(signature))
    );
}
impl ::std::fmt::Debug for _Image {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "_Image {{ storage_class: {:?}, colorspace: {:?}, compression: {:?}, dither: {:?}, matte: {:?}, columns: {:?}, rows: {:?}, colors: {:?}, depth: {:?}, colormap: {:?}, background_color: {:?}, border_color: {:?}, matte_color: {:?}, gamma: {:?}, chromaticity: {:?}, orientation: {:?}, rendering_intent: {:?}, units: {:?}, montage: {:?}, directory: {:?}, geometry: {:?}, offset: {:?}, x_resolution: {:?}, y_resolution: {:?}, page: {:?}, tile_info: {:?}, blur: {:?}, fuzz: {:?}, filter: {:?}, interlace: {:?}, endian: {:?}, gravity: {:?}, compose: {:?}, dispose: {:?}, scene: {:?}, delay: {:?}, iterations: {:?}, total_colors: {:?}, start_loop: {:?}, error: {:?}, timer: {:?}, client_data: {:?}, filename: [{}], magick_filename: [{}], magick: [{}], magick_columns: {:?}, magick_rows: {:?}, exception: {:?}, previous: {:?}, next: {:?}, profiles: {:?}, is_monochrome: {:?}, is_grayscale: {:?}, taint: {:?}, extra: {:?}, ping: {:?}, cache: {:?}, default_views: {:?}, attributes: {:?}, ascii85: {:?}, blob: {:?}, reference_count: {:?}, semaphore: {:?}, logging: {:?}, list: {:?}, signature: {:?} }}" , self . storage_class , self . colorspace , self . compression , self . dither , self . matte , self . columns , self . rows , self . colors , self . depth , self . colormap , self . background_color , self . border_color , self . matte_color , self . gamma , self . chromaticity , self . orientation , self . rendering_intent , self . units , self . montage , self . directory , self . geometry , self . offset , self . x_resolution , self . y_resolution , self . page , self . tile_info , self . blur , self . fuzz , self . filter , self . interlace , self . endian , self . gravity , self . compose , self . dispose , self . scene , self . delay , self . iterations , self . total_colors , self . start_loop , self . error , self . timer , self . client_data , self . filename . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . magick_filename . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . magick . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . magick_columns , self . magick_rows , self . exception , self . previous , self . next , self . profiles , self . is_monochrome , self . is_grayscale , self . taint , self . extra , self . ping , self . cache , self . default_views , self . attributes , self . ascii85 , self . blob , self . reference_count , self . semaphore , self . logging , self . list , self . signature )
    }
}
pub type Image = _Image;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ImageInfo {
    pub compression: CompressionType,
    pub temporary: ::std::os::raw::c_uint,
    pub adjoin: ::std::os::raw::c_uint,
    pub antialias: ::std::os::raw::c_uint,
    pub subimage: ::std::os::raw::c_ulong,
    pub subrange: ::std::os::raw::c_ulong,
    pub depth: ::std::os::raw::c_ulong,
    pub size: *mut ::std::os::raw::c_char,
    pub tile: *mut ::std::os::raw::c_char,
    pub page: *mut ::std::os::raw::c_char,
    pub interlace: InterlaceType,
    pub endian: EndianType,
    pub units: ResolutionType,
    pub quality: ::std::os::raw::c_ulong,
    pub sampling_factor: *mut ::std::os::raw::c_char,
    pub server_name: *mut ::std::os::raw::c_char,
    pub font: *mut ::std::os::raw::c_char,
    pub texture: *mut ::std::os::raw::c_char,
    pub density: *mut ::std::os::raw::c_char,
    pub pointsize: f64,
    pub fuzz: f64,
    pub pen: PixelPacket,
    pub background_color: PixelPacket,
    pub border_color: PixelPacket,
    pub matte_color: PixelPacket,
    pub dither: ::std::os::raw::c_uint,
    pub monochrome: ::std::os::raw::c_uint,
    pub progress: ::std::os::raw::c_uint,
    pub colorspace: ColorspaceType,
    pub type_: ImageType,
    pub group: ::std::os::raw::c_long,
    pub verbose: ::std::os::raw::c_uint,
    pub view: *mut ::std::os::raw::c_char,
    pub authenticate: *mut ::std::os::raw::c_char,
    pub client_data: *mut ::std::os::raw::c_void,
    pub file: *mut FILE,
    pub magick: [::std::os::raw::c_char; 2053usize],
    pub filename: [::std::os::raw::c_char; 2053usize],
    pub cache: _CacheInfoPtr_,
    pub definitions: *mut ::std::os::raw::c_void,
    pub attributes: *mut Image,
    pub ping: ::std::os::raw::c_uint,
    pub preview_type: PreviewType,
    pub affirm: ::std::os::raw::c_uint,
    pub blob: _BlobInfoPtr_,
    pub length: usize,
    pub unique: [::std::os::raw::c_char; 2053usize],
    pub zero: [::std::os::raw::c_char; 2053usize],
    pub signature: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__ImageInfo() {
    assert_eq!(
        ::std::mem::size_of::<_ImageInfo>(),
        8536usize,
        concat!("Size of: ", stringify!(_ImageInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_ImageInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_ImageInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).compression as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(compression))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).temporary as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(temporary))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).adjoin as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(adjoin))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).antialias as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(antialias))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).subimage as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(subimage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).subrange as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(subrange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).depth as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(depth))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).size as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).tile as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(tile))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).page as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(page))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).interlace as *const _ as usize },
        64usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(interlace))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).endian as *const _ as usize },
        68usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(endian))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).units as *const _ as usize },
        72usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(units))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).quality as *const _ as usize },
        80usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(quality))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).sampling_factor as *const _ as usize },
        88usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(sampling_factor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).server_name as *const _ as usize },
        96usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(server_name))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).font as *const _ as usize },
        104usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(font))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).texture as *const _ as usize },
        112usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(texture))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).density as *const _ as usize },
        120usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(density))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).pointsize as *const _ as usize },
        128usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(pointsize))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).fuzz as *const _ as usize },
        136usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(fuzz))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).pen as *const _ as usize },
        144usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(pen))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).background_color as *const _ as usize },
        152usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(background_color))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).border_color as *const _ as usize },
        160usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(border_color))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).matte_color as *const _ as usize },
        168usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(matte_color))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).dither as *const _ as usize },
        176usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(dither))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).monochrome as *const _ as usize },
        180usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(monochrome))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).progress as *const _ as usize },
        184usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(progress))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).colorspace as *const _ as usize },
        188usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(colorspace))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).type_ as *const _ as usize },
        192usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).group as *const _ as usize },
        200usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(group))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).verbose as *const _ as usize },
        208usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(verbose))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).view as *const _ as usize },
        216usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(view))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).authenticate as *const _ as usize },
        224usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(authenticate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).client_data as *const _ as usize },
        232usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(client_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).file as *const _ as usize },
        240usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(file))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).magick as *const _ as usize },
        248usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(magick))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).filename as *const _ as usize },
        2301usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(filename))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).cache as *const _ as usize },
        4360usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(cache))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).definitions as *const _ as usize },
        4368usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(definitions))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).attributes as *const _ as usize },
        4376usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(attributes))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).ping as *const _ as usize },
        4384usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(ping))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).preview_type as *const _ as usize },
        4388usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(preview_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).affirm as *const _ as usize },
        4392usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(affirm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).blob as *const _ as usize },
        4400usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(blob))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).length as *const _ as usize },
        4408usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(length))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).unique as *const _ as usize },
        4416usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(unique))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).zero as *const _ as usize },
        6469usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(zero))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageInfo>())).signature as *const _ as usize },
        8528usize,
        concat!("Offset of field: ", stringify!(_ImageInfo), "::", stringify!(signature))
    );
}
impl ::std::fmt::Debug for _ImageInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "_ImageInfo {{ compression: {:?}, temporary: {:?}, adjoin: {:?}, antialias: {:?}, subimage: {:?}, subrange: {:?}, depth: {:?}, size: {:?}, tile: {:?}, page: {:?}, interlace: {:?}, endian: {:?}, units: {:?}, quality: {:?}, sampling_factor: {:?}, server_name: {:?}, font: {:?}, texture: {:?}, density: {:?}, pointsize: {:?}, fuzz: {:?}, pen: {:?}, background_color: {:?}, border_color: {:?}, matte_color: {:?}, dither: {:?}, monochrome: {:?}, progress: {:?}, colorspace: {:?}, type: {:?}, group: {:?}, verbose: {:?}, view: {:?}, authenticate: {:?}, client_data: {:?}, file: {:?}, magick: [{}], filename: [{}], cache: {:?}, definitions: {:?}, attributes: {:?}, ping: {:?}, preview_type: {:?}, affirm: {:?}, blob: {:?}, length: {:?}, unique: [{}], zero: [{}], signature: {:?} }}" , self . compression , self . temporary , self . adjoin , self . antialias , self . subimage , self . subrange , self . depth , self . size , self . tile , self . page , self . interlace , self . endian , self . units , self . quality , self . sampling_factor , self . server_name , self . font , self . texture , self . density , self . pointsize , self . fuzz , self . pen , self . background_color , self . border_color , self . matte_color , self . dither , self . monochrome , self . progress , self . colorspace , self . type_ , self . group , self . verbose , self . view , self . authenticate , self . client_data , self . file , self . magick . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . filename . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . cache , self . definitions , self . attributes , self . ping , self . preview_type , self . affirm , self . blob , self . length , self . unique . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . zero . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . signature )
    }
}
pub type ImageInfo = _ImageInfo;
extern "C" {
    pub fn CatchImageException(arg1: *mut Image) -> ExceptionType;
}
extern "C" {
    pub fn AllocateImage(arg1: *const ImageInfo) -> *mut Image;
}
extern "C" {
    pub fn AppendImages(
        arg1: *const Image,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn CloneImage(
        arg1: *const Image,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn GetImageClipMask(arg1: *const Image, arg2: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn GetImageCompositeMask(arg1: *const Image, arg2: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn ReferenceImage(arg1: *mut Image) -> *mut Image;
}
extern "C" {
    pub fn CloneImageInfo(arg1: *const ImageInfo) -> *mut ImageInfo;
}
extern "C" {
    pub fn AccessDefinition(
        image_info: *const ImageInfo,
        magick: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetImageGeometry(
        arg1: *const Image,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut RectangleInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IsTaintImage(arg1: *const Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn IsSubimage(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn AddDefinition(
        image_info: *mut ImageInfo,
        magick: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn AddDefinitions(
        image_info: *mut ImageInfo,
        options: *const ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn AnimateImages(image_info: *const ImageInfo, image: *mut Image)
        -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ClipImage(image: *mut Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ClipPathImage(
        image: *mut Image,
        pathname: *const ::std::os::raw::c_char,
        inside: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn CompositeMaskImage(image: *mut Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn CompositePathImage(
        image: *mut Image,
        pathname: *const ::std::os::raw::c_char,
        inside: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DisplayImages(image_info: *const ImageInfo, image: *mut Image)
        -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn RemoveDefinitions(
        image_info: *const ImageInfo,
        options: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ResetImagePage(
        image: *mut Image,
        page: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SetImage(image: *mut Image, arg1: Quantum) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SetImageEx(
        image: *mut Image,
        opacity: Quantum,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SetImageColor(image: *mut Image, pixel: *const PixelPacket) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SetImageColorRegion(
        image: *mut Image,
        x: ::std::os::raw::c_long,
        y: ::std::os::raw::c_long,
        width: ::std::os::raw::c_ulong,
        height: ::std::os::raw::c_ulong,
        pixel: *const PixelPacket,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SetImageClipMask(image: *mut Image, clip_mask: *const Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SetImageCompositeMask(
        image: *mut Image,
        composite_mask: *const Image,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SetImageDepth(
        image: *mut Image,
        arg1: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SetImageInfo(
        image_info: *mut ImageInfo,
        flags: ::std::os::raw::c_uint,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SetImageType(image: *mut Image, arg1: ImageType) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn StripImage(image: *mut Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SyncImage(image: *mut Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn AllocateNextImage(arg1: *const ImageInfo, arg2: *mut Image);
}
extern "C" {
    pub fn DestroyImage(arg1: *mut Image);
}
extern "C" {
    pub fn DestroyImageInfo(arg1: *mut ImageInfo);
}
extern "C" {
    pub fn GetImageException(arg1: *mut Image, arg2: *mut ExceptionInfo);
}
extern "C" {
    pub fn GetImageInfo(arg1: *mut ImageInfo);
}
extern "C" {
    pub fn ModifyImage(arg1: *mut *mut Image, arg2: *mut ExceptionInfo);
}
extern "C" {
    pub fn SetImageOpacity(arg1: *mut Image, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn ImageGetClipMask(arg1: *const Image) -> *mut *mut Image;
}
extern "C" {
    pub fn ImageGetCompositeMask(arg1: *const Image) -> *mut *mut Image;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ImageCharacteristics {
    pub cmyk: ::std::os::raw::c_uint,
    pub grayscale: ::std::os::raw::c_uint,
    pub monochrome: ::std::os::raw::c_uint,
    pub opaque: ::std::os::raw::c_uint,
    pub palette: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__ImageCharacteristics() {
    assert_eq!(
        ::std::mem::size_of::<_ImageCharacteristics>(),
        20usize,
        concat!("Size of: ", stringify!(_ImageCharacteristics))
    );
    assert_eq!(
        ::std::mem::align_of::<_ImageCharacteristics>(),
        4usize,
        concat!("Alignment of ", stringify!(_ImageCharacteristics))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageCharacteristics>())).cmyk as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_ImageCharacteristics), "::", stringify!(cmyk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageCharacteristics>())).grayscale as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ImageCharacteristics),
            "::",
            stringify!(grayscale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ImageCharacteristics>())).monochrome as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ImageCharacteristics),
            "::",
            stringify!(monochrome)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageCharacteristics>())).opaque as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(_ImageCharacteristics), "::", stringify!(opaque))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageCharacteristics>())).palette as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_ImageCharacteristics), "::", stringify!(palette))
    );
}
pub type ImageCharacteristics = _ImageCharacteristics;
extern "C" {
    pub fn GetImageCharacteristics(
        image: *const Image,
        characteristics: *mut ImageCharacteristics,
        optimize: ::std::os::raw::c_uint,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn GetImageDepth(arg1: *const Image, arg2: *mut ExceptionInfo) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IsGrayImage(
        image: *const Image,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn IsMonochromeImage(
        image: *const Image,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn IsOpaqueImage(
        image: *const Image,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn GetImageType(arg1: *const Image, arg2: *mut ExceptionInfo) -> ImageType;
}
extern "C" {
    pub fn GetImageBoundingBox(arg1: *const Image, exception: *mut ExceptionInfo) -> RectangleInfo;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ImageAttribute {
    pub key: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
    pub length: usize,
    pub previous: *mut _ImageAttribute,
    pub next: *mut _ImageAttribute,
}
#[test]
fn bindgen_test_layout__ImageAttribute() {
    assert_eq!(
        ::std::mem::size_of::<_ImageAttribute>(),
        40usize,
        concat!("Size of: ", stringify!(_ImageAttribute))
    );
    assert_eq!(
        ::std::mem::align_of::<_ImageAttribute>(),
        8usize,
        concat!("Alignment of ", stringify!(_ImageAttribute))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageAttribute>())).key as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_ImageAttribute), "::", stringify!(key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageAttribute>())).value as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_ImageAttribute), "::", stringify!(value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageAttribute>())).length as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_ImageAttribute), "::", stringify!(length))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageAttribute>())).previous as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_ImageAttribute), "::", stringify!(previous))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageAttribute>())).next as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(_ImageAttribute), "::", stringify!(next))
    );
}
pub type ImageAttribute = _ImageAttribute;
extern "C" {
    pub fn GetImageAttribute(
        image: *const Image,
        key: *const ::std::os::raw::c_char,
    ) -> *const ImageAttribute;
}
extern "C" {
    pub fn GetImageClippingPathAttribute(image: *const Image) -> *const ImageAttribute;
}
extern "C" {
    pub fn GetImageInfoAttribute(
        image_info: *const ImageInfo,
        image: *const Image,
        key: *const ::std::os::raw::c_char,
    ) -> *const ImageAttribute;
}
extern "C" {
    pub fn CloneImageAttributes(
        clone_image: *mut Image,
        original_image: *const Image,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SetImageAttribute(
        image: *mut Image,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DestroyImageAttributes(image: *mut Image);
}
extern "C" {
    pub fn AverageImages(arg1: *const Image, arg2: *mut ExceptionInfo) -> *mut Image;
}
pub type BlobInfo = _BlobInfo;
extern "C" {
    pub fn CloneBlobInfo(blob_info: *const BlobInfo) -> *mut BlobInfo;
}
extern "C" {
    pub fn ReferenceBlob(blob: *mut BlobInfo) -> *mut BlobInfo;
}
extern "C" {
    pub fn DestroyBlobInfo(blob: *mut BlobInfo);
}
extern "C" {
    pub fn DetachBlob(blob: *mut BlobInfo);
}
extern "C" {
    pub fn GetBlobInfo(blob: *mut BlobInfo);
}
extern "C" {
    pub fn AttachBlob(blob_info: *mut BlobInfo, blob: *const ::std::os::raw::c_void, length: usize);
}
extern "C" {
    pub fn DestroyBlob(image: *mut Image);
}
extern "C" {
    pub fn BlobToImage(
        image_info: *const ImageInfo,
        blob: *const ::std::os::raw::c_void,
        length: usize,
        exception: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn PingBlob(
        image_info: *const ImageInfo,
        blob: *const ::std::os::raw::c_void,
        length: usize,
        exception: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn ImageToBlob(
        image_info: *const ImageInfo,
        image: *mut Image,
        length: *mut usize,
        exception: *mut ExceptionInfo,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum BlobMode {
    UndefinedBlobMode = 0,
    ReadBlobMode = 1,
    ReadBinaryBlobMode = 2,
    WriteBlobMode = 3,
    WriteBinaryBlobMode = 4,
}
extern "C" {
    pub fn OpenBlob(
        image_info: *const ImageInfo,
        image: *mut Image,
        mode: BlobMode,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn CloseBlob(image: *mut Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ReadBlob(image: *mut Image, length: usize, data: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn ReadBlobZC(
        image: *mut Image,
        length: usize,
        data: *mut *mut ::std::os::raw::c_void,
    ) -> usize;
}
extern "C" {
    pub fn WriteBlob(
        image: *mut Image,
        length: usize,
        data: *const ::std::os::raw::c_void,
    ) -> usize;
}
extern "C" {
    pub fn SeekBlob(
        image: *mut Image,
        offset: magick_off_t,
        whence: ::std::os::raw::c_int,
    ) -> magick_off_t;
}
extern "C" {
    pub fn TellBlob(image: *const Image) -> magick_off_t;
}
extern "C" {
    pub fn EOFBlob(image: *const Image) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetBlobStatus(image: *const Image) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetBlobFirstErrno(image: *const Image) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetBlobIsOpen(image: *const Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn GetBlobSize(image: *const Image) -> magick_off_t;
}
extern "C" {
    pub fn GetBlobFileHandle(image: *const Image) -> *mut FILE;
}
extern "C" {
    pub fn GetBlobStreamData(image: *const Image) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn ReadBlobByte(image: *mut Image) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ReadBlobLSBShort(image: *mut Image) -> magick_uint16_t;
}
extern "C" {
    pub fn ReadBlobLSBSignedShort(image: *mut Image) -> magick_int16_t;
}
extern "C" {
    pub fn ReadBlobLSBShorts(image: *mut Image, octets: usize, data: *mut magick_uint16_t)
        -> usize;
}
extern "C" {
    pub fn ReadBlobMSBShort(image: *mut Image) -> magick_uint16_t;
}
extern "C" {
    pub fn ReadBlobMSBSignedShort(image: *mut Image) -> magick_int16_t;
}
extern "C" {
    pub fn ReadBlobMSBShorts(image: *mut Image, octets: usize, data: *mut magick_uint16_t)
        -> usize;
}
extern "C" {
    pub fn ReadBlobLSBLong(image: *mut Image) -> magick_uint32_t;
}
extern "C" {
    pub fn ReadBlobLSBSignedLong(image: *mut Image) -> magick_int32_t;
}
extern "C" {
    pub fn ReadBlobLSBLongs(image: *mut Image, octets: usize, data: *mut magick_uint32_t) -> usize;
}
extern "C" {
    pub fn ReadBlobMSBLong(image: *mut Image) -> magick_uint32_t;
}
extern "C" {
    pub fn ReadBlobMSBSignedLong(image: *mut Image) -> magick_int32_t;
}
extern "C" {
    pub fn ReadBlobMSBLongs(image: *mut Image, octets: usize, data: *mut magick_uint32_t) -> usize;
}
extern "C" {
    pub fn ReadBlobLSBFloat(image: *mut Image) -> f32;
}
extern "C" {
    pub fn ReadBlobLSBFloats(image: *mut Image, octets: usize, data: *mut f32) -> usize;
}
extern "C" {
    pub fn ReadBlobMSBFloat(image: *mut Image) -> f32;
}
extern "C" {
    pub fn ReadBlobMSBFloats(image: *mut Image, octets: usize, data: *mut f32) -> usize;
}
extern "C" {
    pub fn ReadBlobLSBDouble(image: *mut Image) -> f64;
}
extern "C" {
    pub fn ReadBlobLSBDoubles(image: *mut Image, octets: usize, data: *mut f64) -> usize;
}
extern "C" {
    pub fn ReadBlobMSBDouble(image: *mut Image) -> f64;
}
extern "C" {
    pub fn ReadBlobMSBDoubles(image: *mut Image, octets: usize, data: *mut f64) -> usize;
}
extern "C" {
    pub fn ReadBlobString(
        image: *mut Image,
        string: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn WriteBlobByte(image: *mut Image, value: magick_uint8_t) -> usize;
}
extern "C" {
    pub fn WriteBlobFile(
        image: *mut Image,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn WriteBlobLSBShort(image: *mut Image, value: magick_uint16_t) -> usize;
}
extern "C" {
    pub fn WriteBlobLSBSignedShort(image: *mut Image, value: magick_int16_t) -> usize;
}
extern "C" {
    pub fn WriteBlobLSBLong(image: *mut Image, value: magick_uint32_t) -> usize;
}
extern "C" {
    pub fn WriteBlobLSBSignedLong(image: *mut Image, value: magick_int32_t) -> usize;
}
extern "C" {
    pub fn WriteBlobMSBLong(image: *mut Image, value: magick_uint32_t) -> usize;
}
extern "C" {
    pub fn WriteBlobMSBSignedLong(image: *mut Image, value: magick_int32_t) -> usize;
}
extern "C" {
    pub fn WriteBlobMSBShort(image: *mut Image, value: magick_uint16_t) -> usize;
}
extern "C" {
    pub fn WriteBlobMSBSignedShort(image: *mut Image, value: magick_int16_t) -> usize;
}
extern "C" {
    pub fn WriteBlobString(image: *mut Image, string: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn BlobIsSeekable(image: *const Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SetBlobClosable(image: *mut Image, closable: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn SetBlobTemporary(image: *mut Image, isTemporary: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn GetBlobTemporary(image: *const Image) -> ::std::os::raw::c_uint;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MapMode {
    ReadMode = 0,
    WriteMode = 1,
    IOMode = 2,
}
extern "C" {
    pub fn UnmapBlob(map: *mut ::std::os::raw::c_void, length: usize) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn MapBlob(
        file: ::std::os::raw::c_int,
        mode: MapMode,
        offset: magick_off_t,
        length: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn BlobToFile(
        filename: *const ::std::os::raw::c_char,
        blob: *const ::std::os::raw::c_void,
        length: usize,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn FileToBlob(
        filename: *const ::std::os::raw::c_char,
        length: *mut usize,
        exception: *mut ExceptionInfo,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn BlobReserveSize(image: *mut Image, size: magick_off_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ImageToFile(
        image: *mut Image,
        filename: *const ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn GetConfigureBlob(
        filename: *const ::std::os::raw::c_char,
        path: *mut ::std::os::raw::c_char,
        length: *mut usize,
        exception: *mut ExceptionInfo,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn MSBOrderLong(buffer: *mut ::std::os::raw::c_uchar, length: usize);
}
extern "C" {
    pub fn MSBOrderShort(p: *mut ::std::os::raw::c_uchar, length: usize);
}
extern "C" {
    pub fn DisassociateBlob(arg1: *mut Image);
}
extern "C" {
    pub fn CdlImage(
        image: *mut Image,
        cdl: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ExportImageChannel(
        image: *const Image,
        channel: ChannelType,
        exception: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn GetImageChannelDepth(
        image: *const Image,
        channel: ChannelType,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ChannelImage(image: *mut Image, channel: ChannelType) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ImportImageChannel(
        src_image: *const Image,
        dst_image: *mut Image,
        channel: ChannelType,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ImportImageChannelsMasked(
        source_image: *const Image,
        update_image: *mut Image,
        channels: ChannelType,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SetImageChannelDepth(
        image: *mut Image,
        channel: ChannelType,
        depth: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HistogramColorPacket {
    pub pixel: PixelPacket,
    pub count: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__HistogramColorPacket() {
    assert_eq!(
        ::std::mem::size_of::<_HistogramColorPacket>(),
        16usize,
        concat!("Size of: ", stringify!(_HistogramColorPacket))
    );
    assert_eq!(
        ::std::mem::align_of::<_HistogramColorPacket>(),
        8usize,
        concat!("Alignment of ", stringify!(_HistogramColorPacket))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_HistogramColorPacket>())).pixel as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_HistogramColorPacket), "::", stringify!(pixel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_HistogramColorPacket>())).count as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_HistogramColorPacket), "::", stringify!(count))
    );
}
pub type HistogramColorPacket = _HistogramColorPacket;
extern "C" {
    pub fn GetColorHistogram(
        image: *const Image,
        colors: *mut ::std::os::raw::c_ulong,
        exception: *mut ExceptionInfo,
    ) -> *mut HistogramColorPacket;
}
extern "C" {
    pub fn GetNumberColors(
        image: *const Image,
        file: *mut FILE,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn GetColorTuple(
        color: *const PixelPacket,
        depth: ::std::os::raw::c_uint,
        matte: ::std::os::raw::c_uint,
        hex: ::std::os::raw::c_uint,
        tuple: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn IsPaletteImage(
        image: *const Image,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
impl ComplianceType {
    pub const NoCompliance: ComplianceType = ComplianceType::UndefinedCompliance;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ComplianceType {
    UndefinedCompliance = 0,
    SVGCompliance = 1,
    X11Compliance = 2,
    XPMCompliance = 4,
    AllCompliance = 65535,
}
extern "C" {
    pub fn GetColorList(
        pattern: *const ::std::os::raw::c_char,
        number_colors: *mut ::std::os::raw::c_ulong,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn QueryColorDatabase(
        name: *const ::std::os::raw::c_char,
        color: *mut PixelPacket,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn QueryColorname(
        image: *const Image,
        color: *const PixelPacket,
        compliance: ComplianceType,
        name: *mut ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn AllocateImageColormap(
        arg1: *mut Image,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn CycleColormapImage(
        image: *mut Image,
        amount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ReplaceImageColormap(
        image: *mut Image,
        colormap: *const PixelPacket,
        colors: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SortColormapByIntensity(arg1: *mut Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn AnimateImageCommand(
        image_info: *mut ImageInfo,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        metadata: *mut *mut ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn BenchmarkImageCommand(
        image_info: *mut ImageInfo,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        metadata: *mut *mut ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn CompareImageCommand(
        image_info: *mut ImageInfo,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        metadata: *mut *mut ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn CompositeImageCommand(
        image_info: *mut ImageInfo,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        metadata: *mut *mut ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ConjureImageCommand(
        image_info: *mut ImageInfo,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        metadata: *mut *mut ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ConvertImageCommand(
        image_info: *mut ImageInfo,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        metadata: *mut *mut ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DisplayImageCommand(
        image_info: *mut ImageInfo,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        metadata: *mut *mut ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn IdentifyImageCommand(
        image_info: *mut ImageInfo,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        metadata: *mut *mut ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ImportImageCommand(
        image_info: *mut ImageInfo,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        metadata: *mut *mut ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn MagickCommand(
        image_info: *mut ImageInfo,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        metadata: *mut *mut ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn MogrifyImage(
        arg1: *const ImageInfo,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *mut *mut Image,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn MogrifyImageCommand(
        image_info: *mut ImageInfo,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        metadata: *mut *mut ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn MogrifyImages(
        arg1: *const ImageInfo,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *mut *mut Image,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn MontageImageCommand(
        image_info: *mut ImageInfo,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        metadata: *mut *mut ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn TimeImageCommand(
        image_info: *mut ImageInfo,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        metadata: *mut *mut ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn GMCommand(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum HighlightStyle {
    UndefinedHighlightStyle = 0,
    AssignHighlightStyle = 1,
    ThresholdHighlightStyle = 2,
    TintHighlightStyle = 3,
    XorHighlightStyle = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DifferenceImageOptions {
    pub channel: ChannelType,
    pub highlight_style: HighlightStyle,
    pub highlight_color: PixelPacket,
}
#[test]
fn bindgen_test_layout__DifferenceImageOptions() {
    assert_eq!(
        ::std::mem::size_of::<_DifferenceImageOptions>(),
        16usize,
        concat!("Size of: ", stringify!(_DifferenceImageOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<_DifferenceImageOptions>(),
        4usize,
        concat!("Alignment of ", stringify!(_DifferenceImageOptions))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DifferenceImageOptions>())).channel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DifferenceImageOptions),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DifferenceImageOptions>())).highlight_style as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DifferenceImageOptions),
            "::",
            stringify!(highlight_style)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DifferenceImageOptions>())).highlight_color as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DifferenceImageOptions),
            "::",
            stringify!(highlight_color)
        )
    );
}
pub type DifferenceImageOptions = _DifferenceImageOptions;
extern "C" {
    pub fn InitializeDifferenceImageOptions(
        options: *mut DifferenceImageOptions,
        exception: *mut ExceptionInfo,
    );
}
extern "C" {
    pub fn DifferenceImage(
        reference_image: *const Image,
        compare_image: *const Image,
        difference_options: *const DifferenceImageOptions,
        exception: *mut ExceptionInfo,
    ) -> *mut Image;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MetricType {
    UndefinedMetric = 0,
    MeanAbsoluteErrorMetric = 1,
    MeanSquaredErrorMetric = 2,
    PeakAbsoluteErrorMetric = 3,
    PeakSignalToNoiseRatioMetric = 4,
    RootMeanSquaredErrorMetric = 5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DifferenceStatistics {
    pub red: f64,
    pub green: f64,
    pub blue: f64,
    pub opacity: f64,
    pub combined: f64,
}
#[test]
fn bindgen_test_layout__DifferenceStatistics() {
    assert_eq!(
        ::std::mem::size_of::<_DifferenceStatistics>(),
        40usize,
        concat!("Size of: ", stringify!(_DifferenceStatistics))
    );
    assert_eq!(
        ::std::mem::align_of::<_DifferenceStatistics>(),
        8usize,
        concat!("Alignment of ", stringify!(_DifferenceStatistics))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DifferenceStatistics>())).red as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_DifferenceStatistics), "::", stringify!(red))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DifferenceStatistics>())).green as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_DifferenceStatistics), "::", stringify!(green))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DifferenceStatistics>())).blue as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_DifferenceStatistics), "::", stringify!(blue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DifferenceStatistics>())).opacity as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_DifferenceStatistics), "::", stringify!(opacity))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DifferenceStatistics>())).combined as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(_DifferenceStatistics), "::", stringify!(combined))
    );
}
pub type DifferenceStatistics = _DifferenceStatistics;
extern "C" {
    pub fn InitializeDifferenceStatistics(
        difference_statistics: *mut DifferenceStatistics,
        exception: *mut ExceptionInfo,
    );
}
extern "C" {
    pub fn GetImageChannelDifference(
        reference_image: *const Image,
        compare_image: *const Image,
        metric: MetricType,
        statistics: *mut DifferenceStatistics,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn GetImageChannelDistortion(
        reference_image: *const Image,
        compare_image: *const Image,
        channel: ChannelType,
        metric: MetricType,
        distortion: *mut f64,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn GetImageDistortion(
        reference_image: *const Image,
        compare_image: *const Image,
        metric: MetricType,
        distortion: *mut f64,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn IsImagesEqual(arg1: *mut Image, arg2: *const Image) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CompositeOptions_t {
    pub percent_brightness: f64,
    pub amount: f64,
    pub threshold: f64,
}
#[test]
fn bindgen_test_layout__CompositeOptions_t() {
    assert_eq!(
        ::std::mem::size_of::<_CompositeOptions_t>(),
        24usize,
        concat!("Size of: ", stringify!(_CompositeOptions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_CompositeOptions_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_CompositeOptions_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CompositeOptions_t>())).percent_brightness as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CompositeOptions_t),
            "::",
            stringify!(percent_brightness)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CompositeOptions_t>())).amount as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_CompositeOptions_t), "::", stringify!(amount))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CompositeOptions_t>())).threshold as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_CompositeOptions_t), "::", stringify!(threshold))
    );
}
pub type CompositeOptions_t = _CompositeOptions_t;
extern "C" {
    pub fn CompositeImage(
        canvas_image: *mut Image,
        compose: CompositeOperator,
        update_image: *const Image,
        x_offset: ::std::os::raw::c_long,
        y_offset: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn CompositeImageRegion(
        compose: CompositeOperator,
        options: *const CompositeOptions_t,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
        update_image: *const Image,
        update_x: ::std::os::raw::c_long,
        update_y: ::std::os::raw::c_long,
        canvas_image: *mut Image,
        canvas_x: ::std::os::raw::c_long,
        canvas_y: ::std::os::raw::c_long,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn MagickCompositeImageUnderColor(
        image: *mut Image,
        undercolor: *const PixelPacket,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Ascii85Info {
    pub offset: ::std::os::raw::c_long,
    pub line_break: ::std::os::raw::c_long,
    pub buffer: [magick_uint8_t; 10usize],
}
#[test]
fn bindgen_test_layout__Ascii85Info() {
    assert_eq!(
        ::std::mem::size_of::<_Ascii85Info>(),
        32usize,
        concat!("Size of: ", stringify!(_Ascii85Info))
    );
    assert_eq!(
        ::std::mem::align_of::<_Ascii85Info>(),
        8usize,
        concat!("Alignment of ", stringify!(_Ascii85Info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Ascii85Info>())).offset as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_Ascii85Info), "::", stringify!(offset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Ascii85Info>())).line_break as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_Ascii85Info), "::", stringify!(line_break))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Ascii85Info>())).buffer as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_Ascii85Info), "::", stringify!(buffer))
    );
}
pub type Ascii85Info = _Ascii85Info;
pub type WriteByteHook = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut Image,
        arg2: magick_uint8_t,
        info: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint,
>;
extern "C" {
    pub fn Ascii85WriteByteHook(
        image: *mut Image,
        code: magick_uint8_t,
        info: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn BlobWriteByteHook(
        image: *mut Image,
        code: magick_uint8_t,
        info: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn HuffmanDecodeImage(image: *mut Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn HuffmanEncodeImage(
        image_info: *const ImageInfo,
        image: *mut Image,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn HuffmanEncode2Image(
        image_info: *const ImageInfo,
        image: *mut Image,
        write_byte: WriteByteHook,
        info: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn LZWEncodeImage(
        image: *mut Image,
        length: usize,
        pixels: *mut magick_uint8_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn LZWEncode2Image(
        image: *mut Image,
        length: usize,
        pixels: *mut magick_uint8_t,
        write_byte: WriteByteHook,
        info: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn PackbitsEncodeImage(
        image: *mut Image,
        length: usize,
        pixels: *mut magick_uint8_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn PackbitsEncode2Image(
        image: *mut Image,
        length: usize,
        pixels: *mut magick_uint8_t,
        write_byte: WriteByteHook,
        info: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ImageToHuffman2DBlob(
        image: *const Image,
        image_info: *const ImageInfo,
        length: *mut usize,
        exception: *mut ExceptionInfo,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn ImageToJPEGBlob(
        image: *const Image,
        image_info: *const ImageInfo,
        length: *mut usize,
        exception: *mut ExceptionInfo,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Ascii85Encode(image: *mut Image, code: magick_uint8_t);
}
extern "C" {
    pub fn Ascii85Flush(image: *mut Image);
}
extern "C" {
    pub fn Ascii85Initialize(image: *mut Image);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ConfirmAccessMode {
    UndefinedConfirmAccessMode = 0,
    FileExecuteConfirmAccessMode = 1,
    FileReadConfirmAccessMode = 2,
    FileWriteConfirmAccessMode = 3,
    URLGetFTPConfirmAccessMode = 4,
    URLGetFileConfirmAccessMode = 5,
    URLGetHTTPConfirmAccessMode = 6,
}
pub type ConfirmAccessHandler = ::std::option::Option<
    unsafe extern "C" fn(
        mode: ConfirmAccessMode,
        path: *const ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint,
>;
extern "C" {
    pub fn MagickConfirmAccess(
        mode: ConfirmAccessMode,
        path: *const ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn MagickSetConfirmAccessHandler(handler: ConfirmAccessHandler) -> ConfirmAccessHandler;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum QuantumType {
    UndefinedQuantum = 0,
    IndexQuantum = 1,
    GrayQuantum = 2,
    IndexAlphaQuantum = 3,
    GrayAlphaQuantum = 4,
    RedQuantum = 5,
    CyanQuantum = 6,
    GreenQuantum = 7,
    YellowQuantum = 8,
    BlueQuantum = 9,
    MagentaQuantum = 10,
    AlphaQuantum = 11,
    BlackQuantum = 12,
    RGBQuantum = 13,
    RGBAQuantum = 14,
    CMYKQuantum = 15,
    CMYKAQuantum = 16,
    CIEYQuantum = 17,
    CIEXYZQuantum = 18,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum QuantumSampleType {
    UndefinedQuantumSampleType = 0,
    UnsignedQuantumSampleType = 1,
    FloatQuantumSampleType = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum StorageType {
    CharPixel = 0,
    ShortPixel = 1,
    IntegerPixel = 2,
    LongPixel = 3,
    FloatPixel = 4,
    DoublePixel = 5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ExportPixelAreaOptions {
    pub sample_type: QuantumSampleType,
    pub double_minvalue: f64,
    pub double_maxvalue: f64,
    pub grayscale_miniswhite: ::std::os::raw::c_uint,
    pub pad_bytes: ::std::os::raw::c_ulong,
    pub pad_value: ::std::os::raw::c_uchar,
    pub endian: EndianType,
    pub signature: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__ExportPixelAreaOptions() {
    assert_eq!(
        ::std::mem::size_of::<_ExportPixelAreaOptions>(),
        56usize,
        concat!("Size of: ", stringify!(_ExportPixelAreaOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<_ExportPixelAreaOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(_ExportPixelAreaOptions))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ExportPixelAreaOptions>())).sample_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ExportPixelAreaOptions),
            "::",
            stringify!(sample_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ExportPixelAreaOptions>())).double_minvalue as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ExportPixelAreaOptions),
            "::",
            stringify!(double_minvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ExportPixelAreaOptions>())).double_maxvalue as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ExportPixelAreaOptions),
            "::",
            stringify!(double_maxvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ExportPixelAreaOptions>())).grayscale_miniswhite as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ExportPixelAreaOptions),
            "::",
            stringify!(grayscale_miniswhite)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ExportPixelAreaOptions>())).pad_bytes as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ExportPixelAreaOptions),
            "::",
            stringify!(pad_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ExportPixelAreaOptions>())).pad_value as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ExportPixelAreaOptions),
            "::",
            stringify!(pad_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ExportPixelAreaOptions>())).endian as *const _ as usize },
        44usize,
        concat!("Offset of field: ", stringify!(_ExportPixelAreaOptions), "::", stringify!(endian))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ExportPixelAreaOptions>())).signature as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ExportPixelAreaOptions),
            "::",
            stringify!(signature)
        )
    );
}
pub type ExportPixelAreaOptions = _ExportPixelAreaOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ExportPixelAreaInfo {
    pub bytes_exported: usize,
}
#[test]
fn bindgen_test_layout__ExportPixelAreaInfo() {
    assert_eq!(
        ::std::mem::size_of::<_ExportPixelAreaInfo>(),
        8usize,
        concat!("Size of: ", stringify!(_ExportPixelAreaInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_ExportPixelAreaInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_ExportPixelAreaInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ExportPixelAreaInfo>())).bytes_exported as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ExportPixelAreaInfo),
            "::",
            stringify!(bytes_exported)
        )
    );
}
pub type ExportPixelAreaInfo = _ExportPixelAreaInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ImportPixelAreaOptions {
    pub sample_type: QuantumSampleType,
    pub double_minvalue: f64,
    pub double_maxvalue: f64,
    pub grayscale_miniswhite: ::std::os::raw::c_uint,
    pub endian: EndianType,
    pub signature: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__ImportPixelAreaOptions() {
    assert_eq!(
        ::std::mem::size_of::<_ImportPixelAreaOptions>(),
        40usize,
        concat!("Size of: ", stringify!(_ImportPixelAreaOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<_ImportPixelAreaOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(_ImportPixelAreaOptions))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ImportPixelAreaOptions>())).sample_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ImportPixelAreaOptions),
            "::",
            stringify!(sample_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ImportPixelAreaOptions>())).double_minvalue as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ImportPixelAreaOptions),
            "::",
            stringify!(double_minvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ImportPixelAreaOptions>())).double_maxvalue as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ImportPixelAreaOptions),
            "::",
            stringify!(double_maxvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ImportPixelAreaOptions>())).grayscale_miniswhite as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ImportPixelAreaOptions),
            "::",
            stringify!(grayscale_miniswhite)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImportPixelAreaOptions>())).endian as *const _ as usize },
        28usize,
        concat!("Offset of field: ", stringify!(_ImportPixelAreaOptions), "::", stringify!(endian))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ImportPixelAreaOptions>())).signature as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ImportPixelAreaOptions),
            "::",
            stringify!(signature)
        )
    );
}
pub type ImportPixelAreaOptions = _ImportPixelAreaOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ImportPixelAreaInfo {
    pub bytes_imported: usize,
}
#[test]
fn bindgen_test_layout__ImportPixelAreaInfo() {
    assert_eq!(
        ::std::mem::size_of::<_ImportPixelAreaInfo>(),
        8usize,
        concat!("Size of: ", stringify!(_ImportPixelAreaInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_ImportPixelAreaInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_ImportPixelAreaInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ImportPixelAreaInfo>())).bytes_imported as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ImportPixelAreaInfo),
            "::",
            stringify!(bytes_imported)
        )
    );
}
pub type ImportPixelAreaInfo = _ImportPixelAreaInfo;
extern "C" {
    pub fn StorageTypeToString(storage_type: StorageType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn QuantumSampleTypeToString(
        sample_type: QuantumSampleType,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn QuantumTypeToString(quantum_type: QuantumType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ConstituteImage(
        width: ::std::os::raw::c_ulong,
        height: ::std::os::raw::c_ulong,
        map: *const ::std::os::raw::c_char,
        type_: StorageType,
        pixels: *const ::std::os::raw::c_void,
        exception: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn ConstituteTextureImage(
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
        texture: *const Image,
        exception: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn PingImage(image_info: *const ImageInfo, exception: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn ReadImage(image_info: *const ImageInfo, exception: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn ReadInlineImage(
        image_info: *const ImageInfo,
        content: *const ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn DispatchImage(
        image: *const Image,
        x_offset: ::std::os::raw::c_long,
        y_offset: ::std::os::raw::c_long,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
        map: *const ::std::os::raw::c_char,
        type_: StorageType,
        pixels: *mut ::std::os::raw::c_void,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ExportImagePixelArea(
        image: *const Image,
        quantum_type: QuantumType,
        quantum_size: ::std::os::raw::c_uint,
        destination: *mut ::std::os::raw::c_uchar,
        options: *const ExportPixelAreaOptions,
        export_info: *mut ExportPixelAreaInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ExportViewPixelArea(
        view: *const ViewInfo,
        quantum_type: QuantumType,
        quantum_size: ::std::os::raw::c_uint,
        destination: *mut ::std::os::raw::c_uchar,
        options: *const ExportPixelAreaOptions,
        export_info: *mut ExportPixelAreaInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ImportImagePixelArea(
        image: *mut Image,
        quantum_type: QuantumType,
        quantum_size: ::std::os::raw::c_uint,
        source: *const ::std::os::raw::c_uchar,
        options: *const ImportPixelAreaOptions,
        import_info: *mut ImportPixelAreaInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ImportViewPixelArea(
        view: *mut ViewInfo,
        quantum_type: QuantumType,
        quantum_size: ::std::os::raw::c_uint,
        source: *const ::std::os::raw::c_uchar,
        options: *const ImportPixelAreaOptions,
        import_info: *mut ImportPixelAreaInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn WriteImage(image_info: *const ImageInfo, image: *mut Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn WriteImages(
        image_info: *const ImageInfo,
        image: *mut Image,
        filename: *const ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn WriteImagesFile(
        image_info: *const ImageInfo,
        image: *mut Image,
        file: *mut FILE,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ExportPixelAreaOptionsInit(options: *mut ExportPixelAreaOptions);
}
extern "C" {
    pub fn ImportPixelAreaOptionsInit(options: *mut ImportPixelAreaOptions);
}
extern "C" {
    pub fn MagickFindRawImageMinMax(
        image: *mut Image,
        endian: EndianType,
        width: ::std::os::raw::c_ulong,
        height: ::std::os::raw::c_ulong,
        type_: StorageType,
        scanline_octets: ::std::os::raw::c_uint,
        scanline_buffer: *mut ::std::os::raw::c_void,
        min: *mut f64,
        max: *mut f64,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn MagickGetQuantumSamplesPerPixel(quantum_type: QuantumType) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn BorderImage(
        arg1: *const Image,
        arg2: *const RectangleInfo,
        arg3: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn FrameImage(
        arg1: *const Image,
        arg2: *const FrameInfo,
        arg3: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn RaiseImage(
        arg1: *mut Image,
        arg2: *const RectangleInfo,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DelegateInfo {
    pub path: *mut ::std::os::raw::c_char,
    pub decode: *mut ::std::os::raw::c_char,
    pub encode: *mut ::std::os::raw::c_char,
    pub commands: *mut ::std::os::raw::c_char,
    pub mode: ::std::os::raw::c_int,
    pub stealth: ::std::os::raw::c_uint,
    pub signature: ::std::os::raw::c_ulong,
    pub previous: *mut _DelegateInfo,
    pub next: *mut _DelegateInfo,
}
#[test]
fn bindgen_test_layout__DelegateInfo() {
    assert_eq!(
        ::std::mem::size_of::<_DelegateInfo>(),
        64usize,
        concat!("Size of: ", stringify!(_DelegateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_DelegateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_DelegateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DelegateInfo>())).path as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_DelegateInfo), "::", stringify!(path))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DelegateInfo>())).decode as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_DelegateInfo), "::", stringify!(decode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DelegateInfo>())).encode as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_DelegateInfo), "::", stringify!(encode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DelegateInfo>())).commands as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_DelegateInfo), "::", stringify!(commands))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DelegateInfo>())).mode as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(_DelegateInfo), "::", stringify!(mode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DelegateInfo>())).stealth as *const _ as usize },
        36usize,
        concat!("Offset of field: ", stringify!(_DelegateInfo), "::", stringify!(stealth))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DelegateInfo>())).signature as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(_DelegateInfo), "::", stringify!(signature))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DelegateInfo>())).previous as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(_DelegateInfo), "::", stringify!(previous))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DelegateInfo>())).next as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(_DelegateInfo), "::", stringify!(next))
    );
}
pub type DelegateInfo = _DelegateInfo;
extern "C" {
    pub fn GetDelegateCommand(
        image_info: *const ImageInfo,
        image: *mut Image,
        decode: *const ::std::os::raw::c_char,
        encode: *const ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetDelegateInfo(
        decode: *const ::std::os::raw::c_char,
        encode: *const ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> *const DelegateInfo;
}
extern "C" {
    pub fn GetPostscriptDelegateInfo(
        image_info: *const ImageInfo,
        antialias: *mut ::std::os::raw::c_uint,
        exception: *mut ExceptionInfo,
    ) -> *const DelegateInfo;
}
extern "C" {
    pub fn SetDelegateInfo(arg1: *mut DelegateInfo) -> *mut DelegateInfo;
}
extern "C" {
    pub fn InvokePostscriptDelegate(
        verbose: ::std::os::raw::c_uint,
        command: *const ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn InvokeDelegate(
        image_info: *mut ImageInfo,
        image: *mut Image,
        decode: *const ::std::os::raw::c_char,
        encode: *const ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ListDelegateInfo(
        file: *mut FILE,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn PopImagePixels(
        arg1: *const Image,
        arg2: QuantumType,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn PushImagePixels(
        arg1: *mut Image,
        arg2: QuantumType,
        arg3: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn AcquireMemory(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CloneMemory(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn LiberateMemory(arg1: *mut *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ReacquireMemory(arg1: *mut *mut ::std::os::raw::c_void, arg2: usize);
}
extern "C" {
    pub fn AcquireCacheView(
        view: *const ViewInfo,
        x: ::std::os::raw::c_long,
        y: ::std::os::raw::c_long,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
        exception: *mut ExceptionInfo,
    ) -> *const PixelPacket;
}
extern "C" {
    pub fn GetCacheView(
        view: *mut ViewInfo,
        x: ::std::os::raw::c_long,
        y: ::std::os::raw::c_long,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
    ) -> *mut PixelPacket;
}
extern "C" {
    pub fn SetCacheView(
        view: *mut ViewInfo,
        x: ::std::os::raw::c_long,
        y: ::std::os::raw::c_long,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
    ) -> *mut PixelPacket;
}
extern "C" {
    pub fn SyncCacheView(view: *mut ViewInfo) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DescribeImage(
        image: *mut Image,
        file: *mut FILE,
        verbose: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum StretchType {
    NormalStretch = 0,
    UltraCondensedStretch = 1,
    ExtraCondensedStretch = 2,
    CondensedStretch = 3,
    SemiCondensedStretch = 4,
    SemiExpandedStretch = 5,
    ExpandedStretch = 6,
    ExtraExpandedStretch = 7,
    UltraExpandedStretch = 8,
    AnyStretch = 9,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum StyleType {
    NormalStyle = 0,
    ItalicStyle = 1,
    ObliqueStyle = 2,
    AnyStyle = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TypeInfo {
    pub path: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub family: *mut ::std::os::raw::c_char,
    pub style: StyleType,
    pub stretch: StretchType,
    pub weight: ::std::os::raw::c_ulong,
    pub encoding: *mut ::std::os::raw::c_char,
    pub foundry: *mut ::std::os::raw::c_char,
    pub format: *mut ::std::os::raw::c_char,
    pub metrics: *mut ::std::os::raw::c_char,
    pub glyphs: *mut ::std::os::raw::c_char,
    pub stealth: ::std::os::raw::c_uint,
    pub signature: ::std::os::raw::c_ulong,
    pub previous: *mut _TypeInfo,
    pub next: *mut _TypeInfo,
}
#[test]
fn bindgen_test_layout__TypeInfo() {
    assert_eq!(
        ::std::mem::size_of::<_TypeInfo>(),
        120usize,
        concat!("Size of: ", stringify!(_TypeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_TypeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_TypeInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeInfo>())).path as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_TypeInfo), "::", stringify!(path))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeInfo>())).name as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_TypeInfo), "::", stringify!(name))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeInfo>())).description as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_TypeInfo), "::", stringify!(description))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeInfo>())).family as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_TypeInfo), "::", stringify!(family))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeInfo>())).style as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(_TypeInfo), "::", stringify!(style))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeInfo>())).stretch as *const _ as usize },
        36usize,
        concat!("Offset of field: ", stringify!(_TypeInfo), "::", stringify!(stretch))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeInfo>())).weight as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(_TypeInfo), "::", stringify!(weight))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeInfo>())).encoding as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(_TypeInfo), "::", stringify!(encoding))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeInfo>())).foundry as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(_TypeInfo), "::", stringify!(foundry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeInfo>())).format as *const _ as usize },
        64usize,
        concat!("Offset of field: ", stringify!(_TypeInfo), "::", stringify!(format))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeInfo>())).metrics as *const _ as usize },
        72usize,
        concat!("Offset of field: ", stringify!(_TypeInfo), "::", stringify!(metrics))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeInfo>())).glyphs as *const _ as usize },
        80usize,
        concat!("Offset of field: ", stringify!(_TypeInfo), "::", stringify!(glyphs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeInfo>())).stealth as *const _ as usize },
        88usize,
        concat!("Offset of field: ", stringify!(_TypeInfo), "::", stringify!(stealth))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeInfo>())).signature as *const _ as usize },
        96usize,
        concat!("Offset of field: ", stringify!(_TypeInfo), "::", stringify!(signature))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeInfo>())).previous as *const _ as usize },
        104usize,
        concat!("Offset of field: ", stringify!(_TypeInfo), "::", stringify!(previous))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeInfo>())).next as *const _ as usize },
        112usize,
        concat!("Offset of field: ", stringify!(_TypeInfo), "::", stringify!(next))
    );
}
pub type TypeInfo = _TypeInfo;
extern "C" {
    pub fn GetTypeList(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_ulong,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ListTypeInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn GetTypeInfo(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ExceptionInfo,
    ) -> *const TypeInfo;
}
extern "C" {
    pub fn GetTypeInfoByFamily(
        arg1: *const ::std::os::raw::c_char,
        arg2: StyleType,
        arg3: StretchType,
        arg4: ::std::os::raw::c_ulong,
        arg5: *mut ExceptionInfo,
    ) -> *const TypeInfo;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AlignType {
    UndefinedAlign = 0,
    LeftAlign = 1,
    CenterAlign = 2,
    RightAlign = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ClipPathUnits {
    UserSpace = 0,
    UserSpaceOnUse = 1,
    ObjectBoundingBox = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum DecorationType {
    NoDecoration = 0,
    UnderlineDecoration = 1,
    OverlineDecoration = 2,
    LineThroughDecoration = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FillRule {
    UndefinedRule = 0,
    EvenOddRule = 1,
    NonZeroRule = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum GradientType {
    UndefinedGradient = 0,
    LinearGradient = 1,
    RadialGradient = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum LineCap {
    UndefinedCap = 0,
    ButtCap = 1,
    RoundCap = 2,
    SquareCap = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum LineJoin {
    UndefinedJoin = 0,
    MiterJoin = 1,
    RoundJoin = 2,
    BevelJoin = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PaintMethod {
    PointMethod = 0,
    ReplaceMethod = 1,
    FloodfillMethod = 2,
    FillToBorderMethod = 3,
    ResetMethod = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PrimitiveType {
    UndefinedPrimitive = 0,
    PointPrimitive = 1,
    LinePrimitive = 2,
    RectanglePrimitive = 3,
    RoundRectanglePrimitive = 4,
    ArcPrimitive = 5,
    EllipsePrimitive = 6,
    CirclePrimitive = 7,
    PolylinePrimitive = 8,
    PolygonPrimitive = 9,
    BezierPrimitive = 10,
    ColorPrimitive = 11,
    MattePrimitive = 12,
    TextPrimitive = 13,
    ImagePrimitive = 14,
    PathPrimitive = 15,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ReferenceType {
    UndefinedReference = 0,
    GradientReference = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SpreadMethod {
    UndefinedSpread = 0,
    PadSpread = 1,
    ReflectSpead = 2,
    RepeatSpread = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GradientInfo {
    pub type_: GradientType,
    pub color: PixelPacket,
    pub stop: SegmentInfo,
    pub length: ::std::os::raw::c_ulong,
    pub spread: SpreadMethod,
    pub signature: ::std::os::raw::c_ulong,
    pub previous: *mut _GradientInfo,
    pub next: *mut _GradientInfo,
}
#[test]
fn bindgen_test_layout__GradientInfo() {
    assert_eq!(
        ::std::mem::size_of::<_GradientInfo>(),
        88usize,
        concat!("Size of: ", stringify!(_GradientInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_GradientInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_GradientInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GradientInfo>())).type_ as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_GradientInfo), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GradientInfo>())).color as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(_GradientInfo), "::", stringify!(color))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GradientInfo>())).stop as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_GradientInfo), "::", stringify!(stop))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GradientInfo>())).length as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(_GradientInfo), "::", stringify!(length))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GradientInfo>())).spread as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(_GradientInfo), "::", stringify!(spread))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GradientInfo>())).signature as *const _ as usize },
        64usize,
        concat!("Offset of field: ", stringify!(_GradientInfo), "::", stringify!(signature))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GradientInfo>())).previous as *const _ as usize },
        72usize,
        concat!("Offset of field: ", stringify!(_GradientInfo), "::", stringify!(previous))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GradientInfo>())).next as *const _ as usize },
        80usize,
        concat!("Offset of field: ", stringify!(_GradientInfo), "::", stringify!(next))
    );
}
pub type GradientInfo = _GradientInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ElementReference {
    pub id: *mut ::std::os::raw::c_char,
    pub type_: ReferenceType,
    pub gradient: GradientInfo,
    pub signature: ::std::os::raw::c_ulong,
    pub previous: *mut _ElementReference,
    pub next: *mut _ElementReference,
}
#[test]
fn bindgen_test_layout__ElementReference() {
    assert_eq!(
        ::std::mem::size_of::<_ElementReference>(),
        128usize,
        concat!("Size of: ", stringify!(_ElementReference))
    );
    assert_eq!(
        ::std::mem::align_of::<_ElementReference>(),
        8usize,
        concat!("Alignment of ", stringify!(_ElementReference))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ElementReference>())).id as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_ElementReference), "::", stringify!(id))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ElementReference>())).type_ as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_ElementReference), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ElementReference>())).gradient as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_ElementReference), "::", stringify!(gradient))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ElementReference>())).signature as *const _ as usize },
        104usize,
        concat!("Offset of field: ", stringify!(_ElementReference), "::", stringify!(signature))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ElementReference>())).previous as *const _ as usize },
        112usize,
        concat!("Offset of field: ", stringify!(_ElementReference), "::", stringify!(previous))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ElementReference>())).next as *const _ as usize },
        120usize,
        concat!("Offset of field: ", stringify!(_ElementReference), "::", stringify!(next))
    );
}
pub type ElementReference = _ElementReference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DrawInfoExtra {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DrawInfo {
    pub primitive: *mut ::std::os::raw::c_char,
    pub geometry: *mut ::std::os::raw::c_char,
    pub affine: AffineMatrix,
    pub gravity: GravityType,
    pub fill: PixelPacket,
    pub stroke: PixelPacket,
    pub stroke_width: f64,
    pub gradient: GradientInfo,
    pub fill_pattern: *mut Image,
    pub tile: *mut Image,
    pub stroke_pattern: *mut Image,
    pub stroke_antialias: ::std::os::raw::c_uint,
    pub text_antialias: ::std::os::raw::c_uint,
    pub fill_rule: FillRule,
    pub linecap: LineCap,
    pub linejoin: LineJoin,
    pub miterlimit: ::std::os::raw::c_ulong,
    pub dash_offset: f64,
    pub decorate: DecorationType,
    pub compose: CompositeOperator,
    pub text: *mut ::std::os::raw::c_char,
    pub font: *mut ::std::os::raw::c_char,
    pub family: *mut ::std::os::raw::c_char,
    pub style: StyleType,
    pub stretch: StretchType,
    pub weight: ::std::os::raw::c_ulong,
    pub encoding: *mut ::std::os::raw::c_char,
    pub pointsize: f64,
    pub density: *mut ::std::os::raw::c_char,
    pub align: AlignType,
    pub undercolor: PixelPacket,
    pub border_color: PixelPacket,
    pub server_name: *mut ::std::os::raw::c_char,
    pub dash_pattern: *mut f64,
    pub extra: *mut _DrawInfoExtra,
    pub bounds: SegmentInfo,
    pub clip_units: ClipPathUnits,
    pub opacity: Quantum,
    pub render: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
    pub element_reference: ElementReference,
    pub signature: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__DrawInfo() {
    assert_eq!(
        ::std::mem::size_of::<_DrawInfo>(),
        552usize,
        concat!("Size of: ", stringify!(_DrawInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_DrawInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_DrawInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).primitive as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(primitive))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).geometry as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(geometry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).affine as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(affine))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).gravity as *const _ as usize },
        64usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(gravity))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).fill as *const _ as usize },
        68usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(fill))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).stroke as *const _ as usize },
        76usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(stroke))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).stroke_width as *const _ as usize },
        88usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(stroke_width))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).gradient as *const _ as usize },
        96usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(gradient))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).fill_pattern as *const _ as usize },
        184usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(fill_pattern))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).tile as *const _ as usize },
        192usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(tile))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).stroke_pattern as *const _ as usize },
        200usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(stroke_pattern))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).stroke_antialias as *const _ as usize },
        208usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(stroke_antialias))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).text_antialias as *const _ as usize },
        212usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(text_antialias))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).fill_rule as *const _ as usize },
        216usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(fill_rule))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).linecap as *const _ as usize },
        220usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(linecap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).linejoin as *const _ as usize },
        224usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(linejoin))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).miterlimit as *const _ as usize },
        232usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(miterlimit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).dash_offset as *const _ as usize },
        240usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(dash_offset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).decorate as *const _ as usize },
        248usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(decorate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).compose as *const _ as usize },
        252usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(compose))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).text as *const _ as usize },
        256usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(text))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).font as *const _ as usize },
        264usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(font))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).family as *const _ as usize },
        272usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(family))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).style as *const _ as usize },
        280usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(style))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).stretch as *const _ as usize },
        284usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(stretch))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).weight as *const _ as usize },
        288usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(weight))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).encoding as *const _ as usize },
        296usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(encoding))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).pointsize as *const _ as usize },
        304usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(pointsize))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).density as *const _ as usize },
        312usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(density))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).align as *const _ as usize },
        320usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(align))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).undercolor as *const _ as usize },
        324usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(undercolor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).border_color as *const _ as usize },
        332usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(border_color))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).server_name as *const _ as usize },
        344usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(server_name))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).dash_pattern as *const _ as usize },
        352usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(dash_pattern))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).extra as *const _ as usize },
        360usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(extra))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).bounds as *const _ as usize },
        368usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(bounds))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).clip_units as *const _ as usize },
        400usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(clip_units))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).opacity as *const _ as usize },
        404usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(opacity))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).render as *const _ as usize },
        408usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(render))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).flags as *const _ as usize },
        412usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(flags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).element_reference as *const _ as usize },
        416usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(element_reference))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DrawInfo>())).signature as *const _ as usize },
        544usize,
        concat!("Offset of field: ", stringify!(_DrawInfo), "::", stringify!(signature))
    );
}
pub type DrawInfo = _DrawInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PointInfo {
    pub x: f64,
    pub y: f64,
}
#[test]
fn bindgen_test_layout__PointInfo() {
    assert_eq!(
        ::std::mem::size_of::<_PointInfo>(),
        16usize,
        concat!("Size of: ", stringify!(_PointInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_PointInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_PointInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PointInfo>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_PointInfo), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PointInfo>())).y as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_PointInfo), "::", stringify!(y))
    );
}
pub type PointInfo = _PointInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TypeMetric {
    pub pixels_per_em: PointInfo,
    pub ascent: f64,
    pub descent: f64,
    pub width: f64,
    pub height: f64,
    pub max_advance: f64,
    pub bounds: SegmentInfo,
    pub underline_position: f64,
    pub underline_thickness: f64,
}
#[test]
fn bindgen_test_layout__TypeMetric() {
    assert_eq!(
        ::std::mem::size_of::<_TypeMetric>(),
        104usize,
        concat!("Size of: ", stringify!(_TypeMetric))
    );
    assert_eq!(
        ::std::mem::align_of::<_TypeMetric>(),
        8usize,
        concat!("Alignment of ", stringify!(_TypeMetric))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeMetric>())).pixels_per_em as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_TypeMetric), "::", stringify!(pixels_per_em))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeMetric>())).ascent as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_TypeMetric), "::", stringify!(ascent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeMetric>())).descent as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_TypeMetric), "::", stringify!(descent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeMetric>())).width as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(_TypeMetric), "::", stringify!(width))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeMetric>())).height as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(_TypeMetric), "::", stringify!(height))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeMetric>())).max_advance as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(_TypeMetric), "::", stringify!(max_advance))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeMetric>())).bounds as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(_TypeMetric), "::", stringify!(bounds))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeMetric>())).underline_position as *const _ as usize },
        88usize,
        concat!("Offset of field: ", stringify!(_TypeMetric), "::", stringify!(underline_position))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TypeMetric>())).underline_thickness as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_TypeMetric),
            "::",
            stringify!(underline_thickness)
        )
    );
}
pub type TypeMetric = _TypeMetric;
extern "C" {
    pub fn CloneDrawInfo(arg1: *const ImageInfo, arg2: *const DrawInfo) -> *mut DrawInfo;
}
extern "C" {
    pub fn AnnotateImage(arg1: *mut Image, arg2: *const DrawInfo) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DrawAffineImage(
        arg1: *mut Image,
        arg2: *const Image,
        arg3: *const AffineMatrix,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DrawClipPath(
        arg1: *mut Image,
        arg2: *const DrawInfo,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DrawImage(arg1: *mut Image, arg2: *const DrawInfo) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DrawPatternPath(
        arg1: *mut Image,
        arg2: *const DrawInfo,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut *mut Image,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn GetTypeMetrics(
        arg1: *mut Image,
        arg2: *const DrawInfo,
        arg3: *mut TypeMetric,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DestroyDrawInfo(arg1: *mut DrawInfo);
}
extern "C" {
    pub fn GetDrawInfo(arg1: *const ImageInfo, arg2: *mut DrawInfo);
}
extern "C" {
    pub fn DrawInfoGetClipPath(arg1: *const DrawInfo) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn DrawInfoGetCompositePath(arg1: *const DrawInfo) -> *mut *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DrawContext {
    _unused: [u8; 0],
}
pub type DrawContext = *mut _DrawContext;
extern "C" {
    pub fn DrawGetClipUnits(context: DrawContext) -> ClipPathUnits;
}
extern "C" {
    pub fn DrawPeekGraphicContext(context: DrawContext) -> *mut DrawInfo;
}
extern "C" {
    pub fn DrawGetTextDecoration(context: DrawContext) -> DecorationType;
}
extern "C" {
    pub fn DrawAllocateContext(draw_info: *const DrawInfo, image: *mut Image) -> DrawContext;
}
extern "C" {
    pub fn DrawGetClipRule(context: DrawContext) -> FillRule;
}
extern "C" {
    pub fn DrawGetFillRule(context: DrawContext) -> FillRule;
}
extern "C" {
    pub fn DrawGetGravity(context: DrawContext) -> GravityType;
}
extern "C" {
    pub fn DrawGetStrokeLineCap(context: DrawContext) -> LineCap;
}
extern "C" {
    pub fn DrawGetStrokeLineJoin(context: DrawContext) -> LineJoin;
}
extern "C" {
    pub fn DrawGetFillColor(context: DrawContext) -> PixelPacket;
}
extern "C" {
    pub fn DrawGetStrokeColor(context: DrawContext) -> PixelPacket;
}
extern "C" {
    pub fn DrawGetTextUnderColor(context: DrawContext) -> PixelPacket;
}
extern "C" {
    pub fn DrawGetFontStretch(context: DrawContext) -> StretchType;
}
extern "C" {
    pub fn DrawGetFontStyle(context: DrawContext) -> StyleType;
}
extern "C" {
    pub fn DrawGetClipPath(context: DrawContext) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn DrawGetFont(context: DrawContext) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn DrawGetFontFamily(context: DrawContext) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn DrawGetTextEncoding(context: DrawContext) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn DrawRender(context: DrawContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DrawGetStrokeAntialias(context: DrawContext) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DrawGetTextAntialias(context: DrawContext) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DrawGetFontWeight(context: DrawContext) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn DrawGetStrokeMiterLimit(context: DrawContext) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn DrawGetFillOpacity(context: DrawContext) -> f64;
}
extern "C" {
    pub fn DrawGetFontSize(context: DrawContext) -> f64;
}
extern "C" {
    pub fn DrawGetStrokeDashArray(
        context: DrawContext,
        num_elems: *mut ::std::os::raw::c_ulong,
    ) -> *mut f64;
}
extern "C" {
    pub fn DrawGetStrokeDashOffset(context: DrawContext) -> f64;
}
extern "C" {
    pub fn DrawGetStrokeOpacity(context: DrawContext) -> f64;
}
extern "C" {
    pub fn DrawGetStrokeWidth(context: DrawContext) -> f64;
}
extern "C" {
    pub fn DrawAffine(context: DrawContext, affine: *const AffineMatrix);
}
extern "C" {
    pub fn DrawAnnotation(
        context: DrawContext,
        x: f64,
        y: f64,
        text: *const ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn DrawArc(context: DrawContext, sx: f64, sy: f64, ex: f64, ey: f64, sd: f64, ed: f64);
}
extern "C" {
    pub fn DrawBezier(
        context: DrawContext,
        num_coords: ::std::os::raw::c_ulong,
        coordinates: *const PointInfo,
    );
}
extern "C" {
    pub fn DrawCircle(context: DrawContext, ox: f64, oy: f64, px: f64, py: f64);
}
extern "C" {
    pub fn DrawColor(context: DrawContext, x: f64, y: f64, paintMethod: PaintMethod);
}
extern "C" {
    pub fn DrawComment(context: DrawContext, comment: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn DrawDestroyContext(context: DrawContext);
}
extern "C" {
    pub fn DrawEllipse(
        context: DrawContext,
        ox: f64,
        oy: f64,
        rx: f64,
        ry: f64,
        start: f64,
        end: f64,
    );
}
extern "C" {
    pub fn DrawComposite(
        context: DrawContext,
        composite_operator: CompositeOperator,
        x: f64,
        y: f64,
        width: f64,
        height: f64,
        image: *const Image,
    );
}
extern "C" {
    pub fn DrawLine(context: DrawContext, sx: f64, sy: f64, ex: f64, ey: f64);
}
extern "C" {
    pub fn DrawMatte(context: DrawContext, x: f64, y: f64, paint_method: PaintMethod);
}
extern "C" {
    pub fn DrawPathClose(context: DrawContext);
}
extern "C" {
    pub fn DrawPathCurveToAbsolute(
        context: DrawContext,
        x1: f64,
        y1: f64,
        x2: f64,
        y2: f64,
        x: f64,
        y: f64,
    );
}
extern "C" {
    pub fn DrawPathCurveToRelative(
        context: DrawContext,
        x1: f64,
        y1: f64,
        x2: f64,
        y2: f64,
        x: f64,
        y: f64,
    );
}
extern "C" {
    pub fn DrawPathCurveToQuadraticBezierAbsolute(
        context: DrawContext,
        x1: f64,
        y1: f64,
        x: f64,
        y: f64,
    );
}
extern "C" {
    pub fn DrawPathCurveToQuadraticBezierRelative(
        context: DrawContext,
        x1: f64,
        y1: f64,
        x: f64,
        y: f64,
    );
}
extern "C" {
    pub fn DrawPathCurveToQuadraticBezierSmoothAbsolute(context: DrawContext, x: f64, y: f64);
}
extern "C" {
    pub fn DrawPathCurveToQuadraticBezierSmoothRelative(context: DrawContext, x: f64, y: f64);
}
extern "C" {
    pub fn DrawPathCurveToSmoothAbsolute(context: DrawContext, x2: f64, y2: f64, x: f64, y: f64);
}
extern "C" {
    pub fn DrawPathCurveToSmoothRelative(context: DrawContext, x2: f64, y2: f64, x: f64, y: f64);
}
extern "C" {
    pub fn DrawPathEllipticArcAbsolute(
        context: DrawContext,
        rx: f64,
        ry: f64,
        x_axis_rotation: f64,
        large_arc_flag: ::std::os::raw::c_uint,
        sweep_flag: ::std::os::raw::c_uint,
        x: f64,
        y: f64,
    );
}
extern "C" {
    pub fn DrawPathEllipticArcRelative(
        context: DrawContext,
        rx: f64,
        ry: f64,
        x_axis_rotation: f64,
        large_arc_flag: ::std::os::raw::c_uint,
        sweep_flag: ::std::os::raw::c_uint,
        x: f64,
        y: f64,
    );
}
extern "C" {
    pub fn DrawPathFinish(context: DrawContext);
}
extern "C" {
    pub fn DrawPathLineToAbsolute(context: DrawContext, x: f64, y: f64);
}
extern "C" {
    pub fn DrawPathLineToRelative(context: DrawContext, x: f64, y: f64);
}
extern "C" {
    pub fn DrawPathLineToHorizontalAbsolute(context: DrawContext, x: f64);
}
extern "C" {
    pub fn DrawPathLineToHorizontalRelative(context: DrawContext, x: f64);
}
extern "C" {
    pub fn DrawPathLineToVerticalAbsolute(context: DrawContext, y: f64);
}
extern "C" {
    pub fn DrawPathLineToVerticalRelative(context: DrawContext, y: f64);
}
extern "C" {
    pub fn DrawPathMoveToAbsolute(context: DrawContext, x: f64, y: f64);
}
extern "C" {
    pub fn DrawPathMoveToRelative(context: DrawContext, x: f64, y: f64);
}
extern "C" {
    pub fn DrawPathStart(context: DrawContext);
}
extern "C" {
    pub fn DrawPoint(context: DrawContext, x: f64, y: f64);
}
extern "C" {
    pub fn DrawPolygon(
        context: DrawContext,
        num_coords: ::std::os::raw::c_ulong,
        coordinates: *const PointInfo,
    );
}
extern "C" {
    pub fn DrawPolyline(
        context: DrawContext,
        num_coords: ::std::os::raw::c_ulong,
        coordinates: *const PointInfo,
    );
}
extern "C" {
    pub fn DrawPopClipPath(context: DrawContext);
}
extern "C" {
    pub fn DrawPopDefs(context: DrawContext);
}
extern "C" {
    pub fn DrawPopGraphicContext(context: DrawContext);
}
extern "C" {
    pub fn DrawPopPattern(context: DrawContext);
}
extern "C" {
    pub fn DrawPushClipPath(context: DrawContext, clip_path_id: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn DrawPushDefs(context: DrawContext);
}
extern "C" {
    pub fn DrawPushGraphicContext(context: DrawContext);
}
extern "C" {
    pub fn DrawPushPattern(
        context: DrawContext,
        pattern_id: *const ::std::os::raw::c_char,
        x: f64,
        y: f64,
        width: f64,
        height: f64,
    );
}
extern "C" {
    pub fn DrawRectangle(context: DrawContext, x1: f64, y1: f64, x2: f64, y2: f64);
}
extern "C" {
    pub fn DrawRoundRectangle(
        context: DrawContext,
        x1: f64,
        y1: f64,
        x2: f64,
        y2: f64,
        rx: f64,
        ry: f64,
    );
}
extern "C" {
    pub fn DrawScale(context: DrawContext, x: f64, y: f64);
}
extern "C" {
    pub fn DrawSetClipPath(context: DrawContext, clip_path: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn DrawSetClipRule(context: DrawContext, fill_rule: FillRule);
}
extern "C" {
    pub fn DrawSetClipUnits(context: DrawContext, clip_units: ClipPathUnits);
}
extern "C" {
    pub fn DrawSetFillColor(context: DrawContext, fill_color: *const PixelPacket);
}
extern "C" {
    pub fn DrawSetFillColorString(context: DrawContext, fill_color: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn DrawSetFillOpacity(context: DrawContext, fill_opacity: f64);
}
extern "C" {
    pub fn DrawSetFillRule(context: DrawContext, fill_rule: FillRule);
}
extern "C" {
    pub fn DrawSetFillPatternURL(context: DrawContext, fill_url: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn DrawSetFont(context: DrawContext, font_name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn DrawSetFontFamily(context: DrawContext, font_family: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn DrawSetFontSize(context: DrawContext, font_pointsize: f64);
}
extern "C" {
    pub fn DrawSetFontStretch(context: DrawContext, font_stretch: StretchType);
}
extern "C" {
    pub fn DrawSetFontStyle(context: DrawContext, font_style: StyleType);
}
extern "C" {
    pub fn DrawSetFontWeight(context: DrawContext, font_weight: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn DrawSetGravity(context: DrawContext, gravity: GravityType);
}
extern "C" {
    pub fn DrawRotate(context: DrawContext, degrees: f64);
}
extern "C" {
    pub fn DrawSkewX(context: DrawContext, degrees: f64);
}
extern "C" {
    pub fn DrawSkewY(context: DrawContext, degrees: f64);
}
extern "C" {
    pub fn DrawSetStrokeAntialias(context: DrawContext, true_false: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn DrawSetStrokeColor(context: DrawContext, stroke_color: *const PixelPacket);
}
extern "C" {
    pub fn DrawSetStrokeColorString(
        context: DrawContext,
        stroke_color: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn DrawSetStrokeDashArray(
        context: DrawContext,
        num_elems: ::std::os::raw::c_ulong,
        dasharray: *const f64,
    );
}
extern "C" {
    pub fn DrawSetStrokeDashOffset(context: DrawContext, dashoffset: f64);
}
extern "C" {
    pub fn DrawSetStrokeLineCap(context: DrawContext, linecap: LineCap);
}
extern "C" {
    pub fn DrawSetStrokeLineJoin(context: DrawContext, linejoin: LineJoin);
}
extern "C" {
    pub fn DrawSetStrokeMiterLimit(context: DrawContext, miterlimit: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn DrawSetStrokeOpacity(context: DrawContext, opacity: f64);
}
extern "C" {
    pub fn DrawSetStrokePatternURL(context: DrawContext, stroke_url: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn DrawSetStrokeWidth(context: DrawContext, width: f64);
}
extern "C" {
    pub fn DrawSetTextAntialias(context: DrawContext, true_false: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn DrawSetTextDecoration(context: DrawContext, decoration: DecorationType);
}
extern "C" {
    pub fn DrawSetTextEncoding(context: DrawContext, encoding: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn DrawSetTextUnderColor(context: DrawContext, color: *const PixelPacket);
}
extern "C" {
    pub fn DrawSetTextUnderColorString(
        context: DrawContext,
        under_color: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn DrawSetViewbox(
        context: DrawContext,
        x1: ::std::os::raw::c_ulong,
        y1: ::std::os::raw::c_ulong,
        x2: ::std::os::raw::c_ulong,
        y2: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn DrawTranslate(context: DrawContext, x: f64, y: f64);
}
extern "C" {
    pub fn AdaptiveThresholdImage(
        arg1: *const Image,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
        arg4: f64,
        arg5: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn AddNoiseImage(
        arg1: *const Image,
        arg2: NoiseType,
        arg3: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn AddNoiseImageChannel(
        image: *const Image,
        channel: ChannelType,
        noise_type: NoiseType,
        exception: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn BlurImage(
        arg1: *const Image,
        arg2: f64,
        arg3: f64,
        arg4: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn BlurImageChannel(
        image: *const Image,
        channel: ChannelType,
        radius: f64,
        sigma: f64,
        exception: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn ConvolveImage(
        arg1: *const Image,
        arg2: ::std::os::raw::c_uint,
        arg3: *const f64,
        arg4: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn DespeckleImage(arg1: *const Image, arg2: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn EdgeImage(arg1: *const Image, arg2: f64, arg3: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn EmbossImage(
        arg1: *const Image,
        arg2: f64,
        arg3: f64,
        arg4: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn EnhanceImage(arg1: *const Image, arg2: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn GaussianBlurImage(
        arg1: *const Image,
        arg2: f64,
        arg3: f64,
        arg4: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn GaussianBlurImageChannel(
        image: *const Image,
        channel: ChannelType,
        radius: f64,
        sigma: f64,
        exception: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn MedianFilterImage(arg1: *const Image, arg2: f64, arg3: *mut ExceptionInfo)
        -> *mut Image;
}
extern "C" {
    pub fn MotionBlurImage(
        arg1: *const Image,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn ReduceNoiseImage(arg1: *const Image, arg2: f64, arg3: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn ShadeImage(
        arg1: *const Image,
        arg2: ::std::os::raw::c_uint,
        arg3: f64,
        arg4: f64,
        arg5: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn SharpenImage(
        arg1: *const Image,
        arg2: f64,
        arg3: f64,
        arg4: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn SharpenImageChannel(
        image: *const Image,
        channel: ChannelType,
        radius: f64,
        sigma: f64,
        exception: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn SpreadImage(
        arg1: *const Image,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn UnsharpMaskImage(
        arg1: *const Image,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: f64,
        arg6: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn UnsharpMaskImageChannel(
        image: *const Image,
        channel: ChannelType,
        radius: f64,
        sigma: f64,
        amount: f64,
        threshold: f64,
        exception: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn BlackThresholdImage(
        image: *mut Image,
        thresholds: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ChannelThresholdImage(
        arg1: *mut Image,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn RandomChannelThresholdImage(
        arg1: *mut Image,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ThresholdImage(arg1: *mut Image, arg2: f64) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn WhiteThresholdImage(
        image: *mut Image,
        thresholds: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ContrastImage(arg1: *mut Image, arg2: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn EqualizeImage(arg1: *mut Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn GammaImage(
        arg1: *mut Image,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn LevelImage(
        arg1: *mut Image,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn LevelImageChannel(
        arg1: *mut Image,
        arg2: ChannelType,
        arg3: f64,
        arg4: f64,
        arg5: f64,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ModulateImage(
        arg1: *mut Image,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn NegateImage(arg1: *mut Image, arg2: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn NormalizeImage(arg1: *mut Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn CharcoalImage(
        arg1: *const Image,
        arg2: f64,
        arg3: f64,
        arg4: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn ColorizeImage(
        arg1: *const Image,
        arg2: *const ::std::os::raw::c_char,
        arg3: PixelPacket,
        arg4: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn ImplodeImage(arg1: *const Image, arg2: f64, arg3: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn MorphImages(
        arg1: *const Image,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn OilPaintImage(arg1: *const Image, arg2: f64, arg3: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn SteganoImage(
        arg1: *const Image,
        arg2: *const Image,
        arg3: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn StereoImage(
        arg1: *const Image,
        arg2: *const Image,
        arg3: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn SwirlImage(arg1: *const Image, arg2: f64, arg3: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn WaveImage(
        arg1: *const Image,
        arg2: f64,
        arg3: f64,
        arg4: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn ColorMatrixImage(
        image: *mut Image,
        order: ::std::os::raw::c_uint,
        matrix: *const f64,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SolarizeImage(arg1: *mut Image, arg2: f64) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MagickRandomKernel {
    pub z: magick_uint32_t,
    pub w: magick_uint32_t,
}
#[test]
fn bindgen_test_layout__MagickRandomKernel() {
    assert_eq!(
        ::std::mem::size_of::<_MagickRandomKernel>(),
        8usize,
        concat!("Size of: ", stringify!(_MagickRandomKernel))
    );
    assert_eq!(
        ::std::mem::align_of::<_MagickRandomKernel>(),
        4usize,
        concat!("Alignment of ", stringify!(_MagickRandomKernel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickRandomKernel>())).z as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_MagickRandomKernel), "::", stringify!(z))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickRandomKernel>())).w as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(_MagickRandomKernel), "::", stringify!(w))
    );
}
pub type MagickRandomKernel = _MagickRandomKernel;
extern "C" {
    pub fn MagickRandomInteger() -> magick_uint32_t;
}
extern "C" {
    pub fn MagickRandomReal() -> f64;
}
extern "C" {
    pub fn ExpandAffine(arg1: *const AffineMatrix) -> f64;
}
extern "C" {
    pub fn GenerateDifferentialNoise(
        pixel: Quantum,
        noise_type: NoiseType,
        kernel: *mut MagickRandomKernel,
    ) -> f64;
}
extern "C" {
    pub fn GetOptimalKernelWidth(arg1: f64, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetOptimalKernelWidth1D(arg1: f64, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetOptimalKernelWidth2D(arg1: f64, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GenerateNoise(arg1: Quantum, arg2: NoiseType) -> Quantum;
}
extern "C" {
    pub fn Contrast(
        arg1: ::std::os::raw::c_int,
        arg2: *mut Quantum,
        arg3: *mut Quantum,
        arg4: *mut Quantum,
    );
}
extern "C" {
    pub fn HSLTransform(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: *mut Quantum,
        arg5: *mut Quantum,
        arg6: *mut Quantum,
    );
}
extern "C" {
    pub fn HWBTransform(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: *mut Quantum,
        arg5: *mut Quantum,
        arg6: *mut Quantum,
    );
}
extern "C" {
    pub fn Hull(
        arg1: ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ulong,
        arg5: *mut Quantum,
        arg6: *mut Quantum,
        arg7: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn IdentityAffine(arg1: *mut AffineMatrix);
}
extern "C" {
    pub fn Modulate(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: *mut Quantum,
        arg5: *mut Quantum,
        arg6: *mut Quantum,
    );
}
extern "C" {
    pub fn TransformHSL(
        arg1: Quantum,
        arg2: Quantum,
        arg3: Quantum,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut f64,
    );
}
extern "C" {
    pub fn TransformHWB(
        arg1: Quantum,
        arg2: Quantum,
        arg3: Quantum,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut f64,
    );
}
extern "C" {
    pub fn GradientImage(
        arg1: *mut Image,
        arg2: *const PixelPacket,
        arg3: *const PixelPacket,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn HaldClutImage(arg1: *mut Image, clut: *const Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn CloneImageList(arg1: *const Image, arg2: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn GetFirstImageInList(arg1: *const Image) -> *mut Image;
}
extern "C" {
    pub fn GetImageFromList(arg1: *const Image, arg2: ::std::os::raw::c_long) -> *mut Image;
}
extern "C" {
    pub fn GetLastImageInList(arg1: *const Image) -> *mut Image;
}
extern "C" {
    pub fn GetNextImageInList(arg1: *const Image) -> *mut Image;
}
extern "C" {
    pub fn GetPreviousImageInList(arg1: *const Image) -> *mut Image;
}
extern "C" {
    pub fn ImageListToArray(arg1: *const Image, arg2: *mut ExceptionInfo) -> *mut *mut Image;
}
extern "C" {
    pub fn NewImageList() -> *mut Image;
}
extern "C" {
    pub fn RemoveLastImageFromList(arg1: *mut *mut Image) -> *mut Image;
}
extern "C" {
    pub fn RemoveFirstImageFromList(arg1: *mut *mut Image) -> *mut Image;
}
extern "C" {
    pub fn SplitImageList(arg1: *mut Image) -> *mut Image;
}
extern "C" {
    pub fn SyncNextImageInList(arg1: *const Image) -> *mut Image;
}
extern "C" {
    pub fn GetImageIndexInList(arg1: *const Image) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn GetImageListLength(arg1: *const Image) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn AppendImageToList(arg1: *mut *mut Image, arg2: *mut Image);
}
extern "C" {
    pub fn DeleteImageFromList(arg1: *mut *mut Image);
}
extern "C" {
    pub fn DestroyImageList(arg1: *mut Image);
}
extern "C" {
    pub fn InsertImageInList(arg1: *mut *mut Image, arg2: *mut Image);
}
extern "C" {
    pub fn PrependImageToList(arg1: *mut *mut Image, arg2: *mut Image);
}
extern "C" {
    pub fn ReplaceImageInList(images: *mut *mut Image, image: *mut Image);
}
extern "C" {
    pub fn ReverseImageList(arg1: *mut *mut Image);
}
extern "C" {
    pub fn SpliceImageIntoList(
        arg1: *mut *mut Image,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut Image,
    );
}
extern "C" {
    pub fn GetMagickFileFormat(
        header: *const ::std::os::raw::c_uchar,
        header_length: usize,
        format: *mut ::std::os::raw::c_char,
        format_length: usize,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ListMagicInfo(file: *mut FILE, exception: *mut ExceptionInfo) -> ::std::os::raw::c_uint;
}
pub type DecoderHandler = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ImageInfo, arg2: *mut ExceptionInfo) -> *mut Image,
>;
pub type EncoderHandler = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ImageInfo, arg2: *mut Image) -> ::std::os::raw::c_uint,
>;
pub type MagickHandler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_uchar,
        arg2: usize,
    ) -> ::std::os::raw::c_uint,
>;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum CoderClass {
    BrokenCoderClass = -1,
    UnstableCoderClass = 0,
    StableCoderClass = 1,
    PrimaryCoderClass = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ExtensionTreatment {
    HintExtensionTreatment = 0,
    ObeyExtensionTreatment = 1,
    IgnoreExtensionTreatment = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MagickInfo {
    pub next: *mut _MagickInfo,
    pub previous: *mut _MagickInfo,
    pub name: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub note: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub module: *const ::std::os::raw::c_char,
    pub decoder: DecoderHandler,
    pub encoder: EncoderHandler,
    pub magick: MagickHandler,
    pub client_data: *mut ::std::os::raw::c_void,
    pub adjoin: ::std::os::raw::c_uint,
    pub raw: ::std::os::raw::c_uint,
    pub stealth: ::std::os::raw::c_uint,
    pub seekable_stream: ::std::os::raw::c_uint,
    pub blob_support: ::std::os::raw::c_uint,
    pub thread_support: ::std::os::raw::c_uint,
    pub coder_class: CoderClass,
    pub extension_treatment: ExtensionTreatment,
    pub signature: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__MagickInfo() {
    assert_eq!(
        ::std::mem::size_of::<_MagickInfo>(),
        128usize,
        concat!("Size of: ", stringify!(_MagickInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_MagickInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_MagickInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickInfo>())).next as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_MagickInfo), "::", stringify!(next))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickInfo>())).previous as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_MagickInfo), "::", stringify!(previous))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickInfo>())).name as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_MagickInfo), "::", stringify!(name))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickInfo>())).description as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_MagickInfo), "::", stringify!(description))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickInfo>())).note as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(_MagickInfo), "::", stringify!(note))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickInfo>())).version as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(_MagickInfo), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickInfo>())).module as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(_MagickInfo), "::", stringify!(module))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickInfo>())).decoder as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(_MagickInfo), "::", stringify!(decoder))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickInfo>())).encoder as *const _ as usize },
        64usize,
        concat!("Offset of field: ", stringify!(_MagickInfo), "::", stringify!(encoder))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickInfo>())).magick as *const _ as usize },
        72usize,
        concat!("Offset of field: ", stringify!(_MagickInfo), "::", stringify!(magick))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickInfo>())).client_data as *const _ as usize },
        80usize,
        concat!("Offset of field: ", stringify!(_MagickInfo), "::", stringify!(client_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickInfo>())).adjoin as *const _ as usize },
        88usize,
        concat!("Offset of field: ", stringify!(_MagickInfo), "::", stringify!(adjoin))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickInfo>())).raw as *const _ as usize },
        92usize,
        concat!("Offset of field: ", stringify!(_MagickInfo), "::", stringify!(raw))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickInfo>())).stealth as *const _ as usize },
        96usize,
        concat!("Offset of field: ", stringify!(_MagickInfo), "::", stringify!(stealth))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickInfo>())).seekable_stream as *const _ as usize },
        100usize,
        concat!("Offset of field: ", stringify!(_MagickInfo), "::", stringify!(seekable_stream))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickInfo>())).blob_support as *const _ as usize },
        104usize,
        concat!("Offset of field: ", stringify!(_MagickInfo), "::", stringify!(blob_support))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickInfo>())).thread_support as *const _ as usize },
        108usize,
        concat!("Offset of field: ", stringify!(_MagickInfo), "::", stringify!(thread_support))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickInfo>())).coder_class as *const _ as usize },
        112usize,
        concat!("Offset of field: ", stringify!(_MagickInfo), "::", stringify!(coder_class))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickInfo>())).extension_treatment as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_MagickInfo),
            "::",
            stringify!(extension_treatment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MagickInfo>())).signature as *const _ as usize },
        120usize,
        concat!("Offset of field: ", stringify!(_MagickInfo), "::", stringify!(signature))
    );
}
pub type MagickInfo = _MagickInfo;
extern "C" {
    pub fn MagickToMime(magick: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetImageMagick(
        magick: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn IsMagickConflict(magick: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ListModuleMap(file: *mut FILE, exception: *mut ExceptionInfo) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ListMagickInfo(file: *mut FILE, exception: *mut ExceptionInfo)
        -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn UnregisterMagickInfo(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DestroyMagick();
}
extern "C" {
    pub fn InitializeMagick(path: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn PanicDestroyMagick();
}
extern "C" {
    pub fn GetMagickInfo(
        name: *const ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> *const MagickInfo;
}
extern "C" {
    pub fn GetMagickInfoArray(exception: *mut ExceptionInfo) -> *mut *mut MagickInfo;
}
extern "C" {
    pub fn RegisterMagickInfo(magick_info: *mut MagickInfo) -> *mut MagickInfo;
}
extern "C" {
    pub fn SetMagickInfo(name: *const ::std::os::raw::c_char) -> *mut MagickInfo;
}
pub type MagickMallocFunc =
    ::std::option::Option<unsafe extern "C" fn(size: usize) -> *mut ::std::os::raw::c_void>;
pub type MagickFreeFunc =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
pub type MagickReallocFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void,
>;
extern "C" {
    pub fn MagickAllocFunctions(
        free_func: MagickFreeFunc,
        malloc_func: MagickMallocFunc,
        realloc_func: MagickReallocFunc,
    );
}
extern "C" {
    pub fn MagickMalloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn MagickMallocAligned(alignment: usize, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn MagickMallocCleared(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn MagickCloneMemory(
        destination: *mut ::std::os::raw::c_void,
        source: *const ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn MagickRealloc(
        memory: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn MagickFree(memory: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn MagickFreeAligned(memory: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ListModuleInfo(file: *mut FILE, exception: *mut ExceptionInfo)
        -> ::std::os::raw::c_uint;
}
pub type MonitorHandler = ::std::option::Option<
    unsafe extern "C" fn(
        text: *const ::std::os::raw::c_char,
        quantum: magick_int64_t,
        span: magick_uint64_t,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint,
>;
extern "C" {
    pub fn SetMonitorHandler(handler: MonitorHandler) -> MonitorHandler;
}
extern "C" {
    pub fn MagickMonitor(
        text: *const ::std::os::raw::c_char,
        quantum: magick_int64_t,
        span: magick_uint64_t,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn MagickMonitorFormatted(
        quantum: magick_int64_t,
        span: magick_uint64_t,
        exception: *mut ExceptionInfo,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn MontageImages(
        arg1: *const Image,
        arg2: *const MontageInfo,
        arg3: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn CloneMontageInfo(arg1: *const ImageInfo, arg2: *const MontageInfo) -> *mut MontageInfo;
}
extern "C" {
    pub fn DestroyMontageInfo(arg1: *mut MontageInfo);
}
extern "C" {
    pub fn GetMontageInfo(arg1: *const ImageInfo, arg2: *mut MontageInfo);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum QuantumOperator {
    UndefinedQuantumOp = 0,
    AddQuantumOp = 1,
    AndQuantumOp = 2,
    AssignQuantumOp = 3,
    DivideQuantumOp = 4,
    LShiftQuantumOp = 5,
    MultiplyQuantumOp = 6,
    OrQuantumOp = 7,
    RShiftQuantumOp = 8,
    SubtractQuantumOp = 9,
    ThresholdQuantumOp = 10,
    ThresholdBlackQuantumOp = 11,
    ThresholdWhiteQuantumOp = 12,
    XorQuantumOp = 13,
    NoiseGaussianQuantumOp = 14,
    NoiseImpulseQuantumOp = 15,
    NoiseLaplacianQuantumOp = 16,
    NoiseMultiplicativeQuantumOp = 17,
    NoisePoissonQuantumOp = 18,
    NoiseUniformQuantumOp = 19,
    NegateQuantumOp = 20,
    GammaQuantumOp = 21,
    DepthQuantumOp = 22,
    LogQuantumOp = 23,
    MaxQuantumOp = 24,
    MinQuantumOp = 25,
    PowQuantumOp = 26,
    NoiseRandomQuantumOp = 27,
    ThresholdBlackNegateQuantumOp = 28,
    ThresholdWhiteNegateQuantumOp = 29,
}
extern "C" {
    pub fn QuantumOperatorImage(
        image: *mut Image,
        channel: ChannelType,
        quantum_operator: QuantumOperator,
        rvalue: f64,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn QuantumOperatorImageMultivalue(
        image: *mut Image,
        quantum_operator: QuantumOperator,
        values: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn QuantumOperatorRegionImage(
        image: *mut Image,
        x: ::std::os::raw::c_long,
        y: ::std::os::raw::c_long,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
        channel: ChannelType,
        quantum_operator: QuantumOperator,
        rvalue: f64,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ColorFloodfillImage(
        arg1: *mut Image,
        arg2: *const DrawInfo,
        arg3: PixelPacket,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_long,
        arg6: PaintMethod,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn MatteFloodfillImage(
        arg1: *mut Image,
        arg2: PixelPacket,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_long,
        arg6: PaintMethod,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn OpaqueImage(
        arg1: *mut Image,
        arg2: PixelPacket,
        arg3: PixelPacket,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn TransparentImage(
        arg1: *mut Image,
        arg2: PixelPacket,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum VirtualPixelMethod {
    UndefinedVirtualPixelMethod = 0,
    ConstantVirtualPixelMethod = 1,
    EdgeVirtualPixelMethod = 2,
    MirrorVirtualPixelMethod = 3,
    TileVirtualPixelMethod = 4,
}
pub type Cache = _CacheInfoPtr_;
extern "C" {
    pub fn AcquireImagePixels(
        image: *const Image,
        x: ::std::os::raw::c_long,
        y: ::std::os::raw::c_long,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
        exception: *mut ExceptionInfo,
    ) -> *const PixelPacket;
}
extern "C" {
    pub fn AccessImmutableIndexes(image: *const Image) -> *const IndexPacket;
}
extern "C" {
    pub fn AcquireOnePixel(
        image: *const Image,
        x: ::std::os::raw::c_long,
        y: ::std::os::raw::c_long,
        exception: *mut ExceptionInfo,
    ) -> PixelPacket;
}
extern "C" {
    pub fn GetImagePixels(
        image: *mut Image,
        x: ::std::os::raw::c_long,
        y: ::std::os::raw::c_long,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
    ) -> *mut PixelPacket;
}
extern "C" {
    pub fn GetImagePixelsEx(
        image: *mut Image,
        x: ::std::os::raw::c_long,
        y: ::std::os::raw::c_long,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
        exception: *mut ExceptionInfo,
    ) -> *mut PixelPacket;
}
extern "C" {
    pub fn GetImageVirtualPixelMethod(image: *const Image) -> VirtualPixelMethod;
}
extern "C" {
    pub fn GetPixels(image: *const Image) -> *mut PixelPacket;
}
extern "C" {
    pub fn AccessMutablePixels(image: *mut Image) -> *mut PixelPacket;
}
extern "C" {
    pub fn GetIndexes(image: *const Image) -> *mut IndexPacket;
}
extern "C" {
    pub fn AccessMutableIndexes(image: *mut Image) -> *mut IndexPacket;
}
extern "C" {
    pub fn GetOnePixel(
        image: *mut Image,
        x: ::std::os::raw::c_long,
        y: ::std::os::raw::c_long,
    ) -> PixelPacket;
}
extern "C" {
    pub fn GetPixelCacheArea(image: *const Image) -> magick_off_t;
}
extern "C" {
    pub fn SetImagePixels(
        image: *mut Image,
        x: ::std::os::raw::c_long,
        y: ::std::os::raw::c_long,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
    ) -> *mut PixelPacket;
}
extern "C" {
    pub fn SetImagePixelsEx(
        image: *mut Image,
        x: ::std::os::raw::c_long,
        y: ::std::os::raw::c_long,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
        exception: *mut ExceptionInfo,
    ) -> *mut PixelPacket;
}
extern "C" {
    pub fn SetImageVirtualPixelMethod(
        image: *const Image,
        method: VirtualPixelMethod,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SyncImagePixels(image: *mut Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SyncImagePixelsEx(
        image: *mut Image,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn OpenCacheView(image: *mut Image) -> *mut ViewInfo;
}
extern "C" {
    pub fn CloseCacheView(view: *mut ViewInfo);
}
extern "C" {
    pub fn AccessCacheViewPixels(view: *const ViewInfo) -> *mut PixelPacket;
}
extern "C" {
    pub fn AcquireCacheViewIndexes(view: *const ViewInfo) -> *const IndexPacket;
}
extern "C" {
    pub fn AcquireCacheViewPixels(
        view: *const ViewInfo,
        x: ::std::os::raw::c_long,
        y: ::std::os::raw::c_long,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
        exception: *mut ExceptionInfo,
    ) -> *const PixelPacket;
}
extern "C" {
    pub fn AcquireOneCacheViewPixel(
        view: *const ViewInfo,
        pixel: *mut PixelPacket,
        x: ::std::os::raw::c_long,
        y: ::std::os::raw::c_long,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn GetCacheViewArea(view: *const ViewInfo) -> magick_off_t;
}
extern "C" {
    pub fn GetCacheViewImage(view: *const ViewInfo) -> *mut Image;
}
extern "C" {
    pub fn GetCacheViewIndexes(view: *const ViewInfo) -> *mut IndexPacket;
}
extern "C" {
    pub fn GetCacheViewPixels(
        view: *const ViewInfo,
        x: ::std::os::raw::c_long,
        y: ::std::os::raw::c_long,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
        exception: *mut ExceptionInfo,
    ) -> *mut PixelPacket;
}
extern "C" {
    pub fn GetCacheViewRegion(view: *const ViewInfo) -> RectangleInfo;
}
extern "C" {
    pub fn SetCacheViewPixels(
        view: *const ViewInfo,
        x: ::std::os::raw::c_long,
        y: ::std::os::raw::c_long,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
        exception: *mut ExceptionInfo,
    ) -> *mut PixelPacket;
}
extern "C" {
    pub fn SyncCacheViewPixels(
        view: *const ViewInfo,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PixelIteratorOptions {
    pub max_threads: ::std::os::raw::c_int,
    pub signature: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__PixelIteratorOptions() {
    assert_eq!(
        ::std::mem::size_of::<_PixelIteratorOptions>(),
        16usize,
        concat!("Size of: ", stringify!(_PixelIteratorOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<_PixelIteratorOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(_PixelIteratorOptions))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_PixelIteratorOptions>())).max_threads as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PixelIteratorOptions),
            "::",
            stringify!(max_threads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PixelIteratorOptions>())).signature as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_PixelIteratorOptions),
            "::",
            stringify!(signature)
        )
    );
}
pub type PixelIteratorOptions = _PixelIteratorOptions;
extern "C" {
    pub fn InitializePixelIteratorOptions(
        options: *mut PixelIteratorOptions,
        exception: *mut ExceptionInfo,
    );
}
pub type PixelIteratorMonoReadCallback = ::std::option::Option<
    unsafe extern "C" fn(
        mutable_data: *mut ::std::os::raw::c_void,
        immutable_data: *const ::std::os::raw::c_void,
        const_image: *const Image,
        pixels: *const PixelPacket,
        indexes: *const IndexPacket,
        npixels: ::std::os::raw::c_long,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint,
>;
extern "C" {
    pub fn PixelIterateMonoRead(
        call_back: PixelIteratorMonoReadCallback,
        options: *const PixelIteratorOptions,
        description: *const ::std::os::raw::c_char,
        mutable_data: *mut ::std::os::raw::c_void,
        immutable_data: *const ::std::os::raw::c_void,
        x: ::std::os::raw::c_long,
        y: ::std::os::raw::c_long,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
        image: *const Image,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
pub type PixelIteratorMonoModifyCallback = ::std::option::Option<
    unsafe extern "C" fn(
        mutable_data: *mut ::std::os::raw::c_void,
        immutable_data: *const ::std::os::raw::c_void,
        image: *mut Image,
        pixels: *mut PixelPacket,
        indexes: *mut IndexPacket,
        npixels: ::std::os::raw::c_long,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint,
>;
extern "C" {
    pub fn PixelIterateMonoSet(
        call_back: PixelIteratorMonoModifyCallback,
        options: *const PixelIteratorOptions,
        description: *const ::std::os::raw::c_char,
        mutable_data: *mut ::std::os::raw::c_void,
        immutable_data: *const ::std::os::raw::c_void,
        x: ::std::os::raw::c_long,
        y: ::std::os::raw::c_long,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
        image: *mut Image,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn PixelIterateMonoModify(
        call_back: PixelIteratorMonoModifyCallback,
        options: *const PixelIteratorOptions,
        description: *const ::std::os::raw::c_char,
        mutable_data: *mut ::std::os::raw::c_void,
        immutable_data: *const ::std::os::raw::c_void,
        x: ::std::os::raw::c_long,
        y: ::std::os::raw::c_long,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
        image: *mut Image,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
pub type PixelIteratorDualReadCallback = ::std::option::Option<
    unsafe extern "C" fn(
        mutable_data: *mut ::std::os::raw::c_void,
        immutable_data: *const ::std::os::raw::c_void,
        first_image: *const Image,
        first_pixels: *const PixelPacket,
        first_indexes: *const IndexPacket,
        second_image: *const Image,
        second_pixels: *const PixelPacket,
        second_indexes: *const IndexPacket,
        npixels: ::std::os::raw::c_long,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint,
>;
extern "C" {
    pub fn PixelIterateDualRead(
        call_back: PixelIteratorDualReadCallback,
        options: *const PixelIteratorOptions,
        description: *const ::std::os::raw::c_char,
        mutable_data: *mut ::std::os::raw::c_void,
        immutable_data: *const ::std::os::raw::c_void,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
        first_image: *const Image,
        first_x: ::std::os::raw::c_long,
        first_y: ::std::os::raw::c_long,
        second_image: *const Image,
        second_x: ::std::os::raw::c_long,
        second_y: ::std::os::raw::c_long,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
pub type PixelIteratorDualModifyCallback = ::std::option::Option<
    unsafe extern "C" fn(
        mutable_data: *mut ::std::os::raw::c_void,
        immutable_data: *const ::std::os::raw::c_void,
        source_image: *const Image,
        source_pixels: *const PixelPacket,
        source_indexes: *const IndexPacket,
        update_image: *mut Image,
        update_pixels: *mut PixelPacket,
        update_indexes: *mut IndexPacket,
        npixels: ::std::os::raw::c_long,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint,
>;
extern "C" {
    pub fn PixelIterateDualModify(
        call_back: PixelIteratorDualModifyCallback,
        options: *const PixelIteratorOptions,
        description: *const ::std::os::raw::c_char,
        mutable_data: *mut ::std::os::raw::c_void,
        immutable_data: *const ::std::os::raw::c_void,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
        source_image: *const Image,
        source_x: ::std::os::raw::c_long,
        source_y: ::std::os::raw::c_long,
        update_image: *mut Image,
        update_x: ::std::os::raw::c_long,
        update_y: ::std::os::raw::c_long,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
pub type PixelIteratorDualNewCallback = PixelIteratorDualModifyCallback;
extern "C" {
    pub fn PixelIterateDualNew(
        call_back: PixelIteratorDualNewCallback,
        options: *const PixelIteratorOptions,
        description: *const ::std::os::raw::c_char,
        mutable_data: *mut ::std::os::raw::c_void,
        immutable_data: *const ::std::os::raw::c_void,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
        source_image: *const Image,
        source_x: ::std::os::raw::c_long,
        source_y: ::std::os::raw::c_long,
        new_image: *mut Image,
        new_x: ::std::os::raw::c_long,
        new_y: ::std::os::raw::c_long,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
pub type PixelIteratorTripleModifyCallback = ::std::option::Option<
    unsafe extern "C" fn(
        mutable_data: *mut ::std::os::raw::c_void,
        immutable_data: *const ::std::os::raw::c_void,
        source1_image: *const Image,
        source1_pixels: *const PixelPacket,
        source1_indexes: *const IndexPacket,
        source2_image: *const Image,
        source2_pixels: *const PixelPacket,
        source2_indexes: *const IndexPacket,
        update_image: *mut Image,
        update_pixels: *mut PixelPacket,
        update_indexes: *mut IndexPacket,
        npixels: ::std::os::raw::c_long,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint,
>;
extern "C" {
    pub fn PixelIterateTripleModify(
        call_back: PixelIteratorTripleModifyCallback,
        options: *const PixelIteratorOptions,
        description: *const ::std::os::raw::c_char,
        mutable_data: *mut ::std::os::raw::c_void,
        immutable_data: *const ::std::os::raw::c_void,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
        source1_image: *const Image,
        source2_image: *const Image,
        source_x: ::std::os::raw::c_long,
        source_y: ::std::os::raw::c_long,
        update_image: *mut Image,
        update_x: ::std::os::raw::c_long,
        update_y: ::std::os::raw::c_long,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
pub type PixelIteratorTripleNewCallback = PixelIteratorTripleModifyCallback;
extern "C" {
    pub fn PixelIterateTripleNew(
        call_back: PixelIteratorTripleNewCallback,
        options: *const PixelIteratorOptions,
        description: *const ::std::os::raw::c_char,
        mutable_data: *mut ::std::os::raw::c_void,
        immutable_data: *const ::std::os::raw::c_void,
        columns: ::std::os::raw::c_ulong,
        rows: ::std::os::raw::c_ulong,
        source1_image: *const Image,
        source2_image: *const Image,
        source_x: ::std::os::raw::c_long,
        source_y: ::std::os::raw::c_long,
        new_image: *mut Image,
        new_x: ::std::os::raw::c_long,
        new_y: ::std::os::raw::c_long,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn PlasmaImage(
        image: *mut Image,
        segment: *const SegmentInfo,
        attenuate: ::std::os::raw::c_ulong,
        depth: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn GetImageProfile(
        image: *const Image,
        name: *const ::std::os::raw::c_char,
        length: *mut usize,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn DeleteImageProfile(
        image: *mut Image,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ProfileImage(
        image: *mut Image,
        name: *const ::std::os::raw::c_char,
        profile: *mut ::std::os::raw::c_uchar,
        length: usize,
        clone: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SetImageProfile(
        image: *mut Image,
        name: *const ::std::os::raw::c_char,
        profile: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn AppendImageProfile(
        image: *mut Image,
        name: *const ::std::os::raw::c_char,
        profile_chunk: *const ::std::os::raw::c_uchar,
        chunk_length: usize,
    ) -> ::std::os::raw::c_uint;
}
pub type ImageProfileIterator = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn AllocateImageProfileIterator(image: *const Image) -> ImageProfileIterator;
}
extern "C" {
    pub fn NextImageProfile(
        profile_iterator: ImageProfileIterator,
        name: *mut *const ::std::os::raw::c_char,
        profile: *mut *const ::std::os::raw::c_uchar,
        length: *mut usize,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DeallocateImageProfileIterator(profile_iterator: ImageProfileIterator);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _QuantizeInfo {
    pub number_colors: ::std::os::raw::c_ulong,
    pub tree_depth: ::std::os::raw::c_uint,
    pub dither: ::std::os::raw::c_uint,
    pub colorspace: ColorspaceType,
    pub measure_error: ::std::os::raw::c_uint,
    pub signature: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__QuantizeInfo() {
    assert_eq!(
        ::std::mem::size_of::<_QuantizeInfo>(),
        32usize,
        concat!("Size of: ", stringify!(_QuantizeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_QuantizeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_QuantizeInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_QuantizeInfo>())).number_colors as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_QuantizeInfo), "::", stringify!(number_colors))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_QuantizeInfo>())).tree_depth as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_QuantizeInfo), "::", stringify!(tree_depth))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_QuantizeInfo>())).dither as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(_QuantizeInfo), "::", stringify!(dither))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_QuantizeInfo>())).colorspace as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_QuantizeInfo), "::", stringify!(colorspace))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_QuantizeInfo>())).measure_error as *const _ as usize },
        20usize,
        concat!("Offset of field: ", stringify!(_QuantizeInfo), "::", stringify!(measure_error))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_QuantizeInfo>())).signature as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_QuantizeInfo), "::", stringify!(signature))
    );
}
pub type QuantizeInfo = _QuantizeInfo;
extern "C" {
    pub fn CloneQuantizeInfo(arg1: *const QuantizeInfo) -> *mut QuantizeInfo;
}
extern "C" {
    pub fn GetImageQuantizeError(arg1: *mut Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn MapImage(
        arg1: *mut Image,
        arg2: *const Image,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn MapImages(
        arg1: *mut Image,
        arg2: *const Image,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn OrderedDitherImage(arg1: *mut Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn QuantizeImage(arg1: *const QuantizeInfo, arg2: *mut Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn QuantizeImages(arg1: *const QuantizeInfo, arg2: *mut Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SegmentImage(
        arg1: *mut Image,
        arg2: ColorspaceType,
        arg3: ::std::os::raw::c_uint,
        arg4: f64,
        arg5: f64,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn CompressImageColormap(arg1: *mut Image);
}
extern "C" {
    pub fn DestroyQuantizeInfo(arg1: *mut QuantizeInfo);
}
extern "C" {
    pub fn GetQuantizeInfo(arg1: *mut QuantizeInfo);
}
extern "C" {
    pub fn GrayscalePseudoClassImage(arg1: *mut Image, arg2: ::std::os::raw::c_uint);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum RegistryType {
    UndefinedRegistryType = 0,
    ImageRegistryType = 1,
    ImageInfoRegistryType = 2,
}
extern "C" {
    pub fn GetImageFromMagickRegistry(
        name: *const ::std::os::raw::c_char,
        id: *mut ::std::os::raw::c_long,
        exception: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn SetMagickRegistry(
        type_: RegistryType,
        blob: *const ::std::os::raw::c_void,
        length: usize,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn DeleteMagickRegistry(id: ::std::os::raw::c_long) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn GetMagickRegistry(
        id: ::std::os::raw::c_long,
        type_: *mut RegistryType,
        length: *mut usize,
        exception: *mut ExceptionInfo,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn MagnifyImage(arg1: *const Image, arg2: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn MinifyImage(arg1: *const Image, arg2: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn ResizeImage(
        arg1: *const Image,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
        arg4: FilterTypes,
        arg5: f64,
        arg6: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn SampleImage(
        arg1: *const Image,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn ScaleImage(
        arg1: *const Image,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn ThumbnailImage(
        arg1: *const Image,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn ZoomImage(
        arg1: *const Image,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut ExceptionInfo,
    ) -> *mut Image;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ResourceType {
    UndefinedResource = 0,
    DiskResource = 1,
    FileResource = 2,
    MapResource = 3,
    MemoryResource = 4,
    PixelsResource = 5,
    ThreadsResource = 6,
    WidthResource = 7,
    HeightResource = 8,
}
extern "C" {
    pub fn AcquireMagickResource(
        type_: ResourceType,
        size: magick_uint64_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ListMagickResourceInfo(
        file: *mut FILE,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SetMagickResourceLimit(
        type_: ResourceType,
        limit: magick_int64_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn GetMagickResource(type_: ResourceType) -> magick_int64_t;
}
extern "C" {
    pub fn GetMagickResourceLimit(type_: ResourceType) -> magick_int64_t;
}
extern "C" {
    pub fn DestroyMagickResources();
}
extern "C" {
    pub fn InitializeMagickResources();
}
extern "C" {
    pub fn LiberateMagickResource(type_: ResourceType, size: magick_uint64_t);
}
extern "C" {
    pub fn AffineTransformImage(
        arg1: *const Image,
        arg2: *const AffineMatrix,
        arg3: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn AutoOrientImage(
        image: *const Image,
        current_orientation: OrientationType,
        exception: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn RotateImage(arg1: *const Image, arg2: f64, arg3: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn ShearImage(
        arg1: *const Image,
        arg2: f64,
        arg3: f64,
        arg4: *mut ExceptionInfo,
    ) -> *mut Image;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SignatureInfo {
    pub digest: [::std::os::raw::c_ulong; 8usize],
    pub low_order: ::std::os::raw::c_ulong,
    pub high_order: ::std::os::raw::c_ulong,
    pub offset: ::std::os::raw::c_long,
    pub message: [::std::os::raw::c_uchar; 64usize],
}
#[test]
fn bindgen_test_layout__SignatureInfo() {
    assert_eq!(
        ::std::mem::size_of::<_SignatureInfo>(),
        152usize,
        concat!("Size of: ", stringify!(_SignatureInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_SignatureInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_SignatureInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SignatureInfo>())).digest as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_SignatureInfo), "::", stringify!(digest))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SignatureInfo>())).low_order as *const _ as usize },
        64usize,
        concat!("Offset of field: ", stringify!(_SignatureInfo), "::", stringify!(low_order))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SignatureInfo>())).high_order as *const _ as usize },
        72usize,
        concat!("Offset of field: ", stringify!(_SignatureInfo), "::", stringify!(high_order))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SignatureInfo>())).offset as *const _ as usize },
        80usize,
        concat!("Offset of field: ", stringify!(_SignatureInfo), "::", stringify!(offset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SignatureInfo>())).message as *const _ as usize },
        88usize,
        concat!("Offset of field: ", stringify!(_SignatureInfo), "::", stringify!(message))
    );
}
impl ::std::fmt::Debug for _SignatureInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "_SignatureInfo {{ digest: {:?}, low_order: {:?}, high_order: {:?}, offset: {:?}, message: [{}] }}" , self . digest , self . low_order , self . high_order , self . offset , self . message . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) )
    }
}
pub type SignatureInfo = _SignatureInfo;
extern "C" {
    pub fn SignatureImage(arg1: *mut Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn FinalizeSignature(arg1: *mut SignatureInfo);
}
extern "C" {
    pub fn GetSignatureInfo(arg1: *mut SignatureInfo);
}
extern "C" {
    pub fn TransformSignature(arg1: *mut SignatureInfo);
}
extern "C" {
    pub fn UpdateSignature(
        arg1: *mut SignatureInfo,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: usize,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ImageChannelStatistics {
    pub maximum: f64,
    pub minimum: f64,
    pub mean: f64,
    pub standard_deviation: f64,
    pub variance: f64,
}
#[test]
fn bindgen_test_layout__ImageChannelStatistics() {
    assert_eq!(
        ::std::mem::size_of::<_ImageChannelStatistics>(),
        40usize,
        concat!("Size of: ", stringify!(_ImageChannelStatistics))
    );
    assert_eq!(
        ::std::mem::align_of::<_ImageChannelStatistics>(),
        8usize,
        concat!("Alignment of ", stringify!(_ImageChannelStatistics))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageChannelStatistics>())).maximum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ImageChannelStatistics),
            "::",
            stringify!(maximum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageChannelStatistics>())).minimum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ImageChannelStatistics),
            "::",
            stringify!(minimum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageChannelStatistics>())).mean as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_ImageChannelStatistics), "::", stringify!(mean))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ImageChannelStatistics>())).standard_deviation as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ImageChannelStatistics),
            "::",
            stringify!(standard_deviation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ImageChannelStatistics>())).variance as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ImageChannelStatistics),
            "::",
            stringify!(variance)
        )
    );
}
pub type ImageChannelStatistics = _ImageChannelStatistics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ImageStatistics {
    pub red: ImageChannelStatistics,
    pub green: ImageChannelStatistics,
    pub blue: ImageChannelStatistics,
    pub opacity: ImageChannelStatistics,
}
#[test]
fn bindgen_test_layout__ImageStatistics() {
    assert_eq!(
        ::std::mem::size_of::<_ImageStatistics>(),
        160usize,
        concat!("Size of: ", stringify!(_ImageStatistics))
    );
    assert_eq!(
        ::std::mem::align_of::<_ImageStatistics>(),
        8usize,
        concat!("Alignment of ", stringify!(_ImageStatistics))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageStatistics>())).red as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_ImageStatistics), "::", stringify!(red))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageStatistics>())).green as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(_ImageStatistics), "::", stringify!(green))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageStatistics>())).blue as *const _ as usize },
        80usize,
        concat!("Offset of field: ", stringify!(_ImageStatistics), "::", stringify!(blue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ImageStatistics>())).opacity as *const _ as usize },
        120usize,
        concat!("Offset of field: ", stringify!(_ImageStatistics), "::", stringify!(opacity))
    );
}
pub type ImageStatistics = _ImageStatistics;
extern "C" {
    pub fn GetImageStatistics(
        image: *const Image,
        statistics: *mut ImageStatistics,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn TextureImage(arg1: *mut Image, arg2: *const Image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ChopImage(
        image: *const Image,
        chop_info: *const RectangleInfo,
        exception: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn CoalesceImages(image: *const Image, exception: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn CropImage(
        image: *const Image,
        geometry: *const RectangleInfo,
        exception: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn DeconstructImages(image: *const Image, exception: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn ExtentImage(
        image: *const Image,
        geometry: *const RectangleInfo,
        exception: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn FlattenImages(image: *const Image, exception: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn FlipImage(image: *const Image, exception: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn FlopImage(image: *const Image, exception: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn MosaicImages(image: *const Image, exception: *mut ExceptionInfo) -> *mut Image;
}
extern "C" {
    pub fn RollImage(
        image: *const Image,
        x_offset: ::std::os::raw::c_long,
        y_offset: ::std::os::raw::c_long,
        exception: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn ShaveImage(
        image: *const Image,
        shave_info: *const RectangleInfo,
        exception: *mut ExceptionInfo,
    ) -> *mut Image;
}
extern "C" {
    pub fn TransformImage(
        arg1: *mut *mut Image,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PathType {
    RootPath = 0,
    HeadPath = 1,
    TailPath = 2,
    BasePath = 3,
    ExtensionPath = 4,
    MagickPath = 5,
    SubImagePath = 6,
    FullPath = 7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TokenInfo {
    pub state: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_uint,
    pub offset: ::std::os::raw::c_long,
    pub quote: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__TokenInfo() {
    assert_eq!(
        ::std::mem::size_of::<_TokenInfo>(),
        24usize,
        concat!("Size of: ", stringify!(_TokenInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_TokenInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_TokenInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TokenInfo>())).state as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_TokenInfo), "::", stringify!(state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TokenInfo>())).flag as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(_TokenInfo), "::", stringify!(flag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TokenInfo>())).offset as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_TokenInfo), "::", stringify!(offset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TokenInfo>())).quote as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_TokenInfo), "::", stringify!(quote))
    );
}
pub type TokenInfo = _TokenInfo;
pub type MagickTextTranslate = ::std::option::Option<
    unsafe extern "C" fn(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        size: usize,
    ) -> usize,
>;
extern "C" {
    pub fn AcquireString(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn AllocateString(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Base64Encode(
        arg1: *const ::std::os::raw::c_uchar,
        arg2: usize,
        arg3: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn EscapeString(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetPageGeometry(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ListFiles(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn StringToArgv(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn StringToList(arg1: *const ::std::os::raw::c_char) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TranslateText(
        arg1: *const ImageInfo,
        arg2: *mut Image,
        arg3: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TranslateTextEx(
        arg1: *const ImageInfo,
        arg2: *mut Image,
        arg3: *const ::std::os::raw::c_char,
        arg4: MagickTextTranslate,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetClientFilename() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetClientName() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetClientPath() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SetClientFilename(arg1: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SetClientName(arg1: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SetClientPath(arg1: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn StringToDouble(arg1: *const ::std::os::raw::c_char, arg2: f64) -> f64;
}
extern "C" {
    pub fn GetGeometry(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_ulong,
        arg5: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GlobExpression(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LocaleNCompare(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LocaleCompare(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetMagickDimension(
        str: *const ::std::os::raw::c_char,
        width: *mut f64,
        height: *mut f64,
        xoff: *mut f64,
        yoff: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetMagickGeometry(
        geometry: *const ::std::os::raw::c_char,
        x: *mut ::std::os::raw::c_long,
        y: *mut ::std::os::raw::c_long,
        width: *mut ::std::os::raw::c_ulong,
        height: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MagickRandReentrant(seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MagickSpawnVP(
        verbose: ::std::os::raw::c_uint,
        file: *const ::std::os::raw::c_char,
        argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SystemCommand(
        arg1: ::std::os::raw::c_uint,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tokenizer(
        arg1: *mut TokenInfo,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_char,
        arg7: *mut ::std::os::raw::c_char,
        arg8: *mut ::std::os::raw::c_char,
        arg9: ::std::os::raw::c_char,
        arg10: *mut ::std::os::raw::c_char,
        arg11: *mut ::std::os::raw::c_int,
        arg12: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MagickRandNewSeed() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Base64Decode(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut usize,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn CloneString(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ConcatenateString(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ExpandFilenames(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn GetExecutionPath(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn GetExecutionPathUsingName(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn MagickCreateDirectoryPath(
        dir: *const ::std::os::raw::c_char,
        exception: *mut ExceptionInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn IsAccessible(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn IsAccessibleNoLogging(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn IsAccessibleAndNotEmpty(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn IsGeometry(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn IsGlob(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn IsWriteable(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn MagickSceneFileName(
        filename: *mut ::std::os::raw::c_char,
        filename_template: *const ::std::os::raw::c_char,
        scene_template: *const ::std::os::raw::c_char,
        force: ::std::os::raw::c_uint,
        scene: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SubstituteString(
        buffer: *mut *mut ::std::os::raw::c_char,
        search: *const ::std::os::raw::c_char,
        replace: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn MultilineCensus(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn AppendImageFormat(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn DefineClientName(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn DefineClientPathAndName(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ExpandFilename(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn FormatSize(size: magick_int64_t, format: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn GetPathComponent(
        arg1: *const ::std::os::raw::c_char,
        arg2: PathType,
        arg3: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn GetToken(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn LocaleLower(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn LocaleUpper(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Strip(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn SetGeometry(arg1: *const Image, arg2: *mut RectangleInfo);
}
extern "C" {
    pub fn FormatString(
        string: *mut ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn FormatStringList(
        string: *mut ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        operands: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn MagickFormatString(
        string: *mut ::std::os::raw::c_char,
        length: usize,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn MagickFormatStringList(
        string: *mut ::std::os::raw::c_char,
        length: usize,
        format: *const ::std::os::raw::c_char,
        operands: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn MagickSizeStrToInt64(
        str: *const ::std::os::raw::c_char,
        kilo: ::std::os::raw::c_uint,
    ) -> magick_int64_t;
}
extern "C" {
    pub fn MagickGetToken(
        start: *const ::std::os::raw::c_char,
        end: *mut *mut ::std::os::raw::c_char,
        token: *mut ::std::os::raw::c_char,
        buffer_length: usize,
    ) -> usize;
}
extern "C" {
    pub fn MagickStripSpacesFromString(string: *mut ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn MagickStrlCat(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        size: usize,
    ) -> usize;
}
extern "C" {
    pub fn MagickStrlCpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        size: usize,
    ) -> usize;
}
extern "C" {
    pub fn MagickStrlCpyTrunc(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        size: usize,
    ) -> usize;
}
extern "C" {
    pub fn GetMagickCopyright() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetMagickVersion(arg1: *mut ::std::os::raw::c_ulong) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetMagickWebSite() -> *const ::std::os::raw::c_char;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__va_list_tag), "::", stringify!(gp_offset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(__va_list_tag), "::", stringify!(fp_offset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(__va_list_tag), "::", stringify!(reg_save_area))
    );
}
